{
  "api/i5.VirtualAgents.Agent.html": {
    "href": "api/i5.VirtualAgents.Agent.html",
    "title": "Class Agent | Documentation of the Virtual Agents Framework",
    "keywords": "Class Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly Inheritance Object Agent Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class Agent : MonoBehaviour Properties Animator The animator component which controls the agent's animations Declaration public Animator Animator { get; } Property Value Type Description Animator Tasks List of shortcut methods to add common tasks to the agent's task queue Syntactic sugar. It is also possible to directly enqueue task objects on the agent instead, e.g. for custom tasks Declaration public TaskActions Tasks { get; } Property Value Type Description TaskActions Methods ScheduleTask(IAgentTask, Int32, String) Schedule a task Declaration public void ScheduleTask(IAgentTask task, int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description IAgentTask task Task to be scheduled Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value String layer"
  },
  "api/i5.VirtualAgents.AgentAnimationUpdater.html": {
    "href": "api/i5.VirtualAgents.AgentAnimationUpdater.html",
    "title": "Class AgentAnimationUpdater | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation Inheritance Object AgentAnimationUpdater Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class AgentAnimationUpdater : MonoBehaviour"
  },
  "api/i5.VirtualAgents.html": {
    "href": "api/i5.VirtualAgents.html",
    "title": "Namespace i5.VirtualAgents | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents Classes Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTaskManager.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTaskManager.html",
    "title": "Class AgentTaskManager | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskManager Inheritance Object AgentTaskManager Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public class AgentTaskManager Constructors AgentTaskManager() Creates a new task manager but does not yet associate an agent with it If you use this method, you need to call the AssociateAgent method at some point before scheduled tasks can be executed Declaration public AgentTaskManager() AgentTaskManager(Agent) Creates a new task manager and associates with an agent Declaration public AgentTaskManager(Agent agent) Parameters Type Name Description Agent agent The agent on which scheduled tasks should be executed Properties CurrentState Agent's current state Declaration public TaskState CurrentState { get; } Property Value Type Description TaskState CurrentTask Agent's current task Declaration public IAgentTask CurrentTask { get; } Property Value Type Description IAgentTask ExecutingAgent Agent which will execute the scheduled tasks Declaration public Agent ExecutingAgent { get; } Property Value Type Description Agent IsActive Checks whether the task manager is active or has been deactivated Only returns false if the task manager has explicitly been deactivated Declaration public bool IsActive { get; set; } Property Value Type Description Boolean Methods AssociateAgent(Agent) Associates an agent with the task manager Scheduled tasks can only run if an agent was registered with the task manager, either using this method or the constructor which takes an agent as an argument Declaration public void AssociateAgent(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the scheduled tasks PeekNextTask() Peeks at the next task that the task manager will execute after the current one Declaration public IAgentTask PeekNextTask() Returns Type Description IAgentTask Returns the next task to execute, null if no task is upcoming ScheduleTask(IAgentTask, Int32) Schedules a task in the queue, sorted by the given priority Declaration public void ScheduleTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task The task that should be scheduled for execution Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Update() Enable the right mode depending on the agent's status Declaration public void Update() Events OnStateChanged Event which is raised once the agent's state changes Declaration public event Action OnStateChanged Event Type Type Description Action OnTaskFinished Event which is raised once the agent has finished the current task Declaration public event AgentTaskManager.TaskFinishedEvent OnTaskFinished Event Type Type Description AgentTaskManager.TaskFinishedEvent"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTaskManager.TaskFinishedEvent.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTaskManager.TaskFinishedEvent.html",
    "title": "Delegate AgentTaskManager.TaskFinishedEvent | Documentation of the Virtual Agents Framework",
    "keywords": "Delegate AgentTaskManager.TaskFinishedEvent Event handler for finished tasks Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public delegate void TaskFinishedEvent(AgentTaskManager sender, IAgentTask finishedTask); Parameters Type Name Description AgentTaskManager sender The task manager on which the task finished IAgentTask finishedTask The task that finished"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTaskQueue.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTaskQueue.html",
    "title": "Class AgentTaskQueue | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskQueue Holds an IAgentTask queue Inheritance Object AgentTaskQueue Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public class AgentTaskQueue Constructors AgentTaskQueue() Create an empty IAgentTask queue Declaration public AgentTaskQueue() Methods AddTask(IAgentTask, Int32) Add a new task to the queue according to the FIFO principle but with priority categories Declaration public void AddTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task Any task that implements the IAgentTask interface Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. PeekNextTask() Peeks the next task in the queue Declaration public IAgentTask PeekNextTask() Returns Type Description IAgentTask Returns the next upcoming task in the queue, null if no more tasks are queued RequestNextTask() Request the next task from the queue Declaration public IAgentTask RequestNextTask() Returns Type Description IAgentTask Next task from the queue or null if the queue is empty"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentAnimationTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentAnimationTask.html",
    "title": "Class AgentAnimationTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationTask Starts an animation by setting the trigger in the animator belonging to the agent. It will stop it after playtime second using the stop trigger if provided or else the startTrigger again Inheritance Object AgentBaseTask AgentAnimationTask Implements IAgentTask Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.OnTaskFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) Namespace : i5.VirtualAgents.TaskSystem.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentAnimationTask : AgentBaseTask, IAgentTask Constructors AgentAnimationTask(String, Single, String) Creates the animation task instance Declaration public AgentAnimationTask(string startTrigger, float playTime, string stopTrigger = \"\") Parameters Type Name Description String startTrigger The name of the trigger in the animator which starts the animation Single playTime How many seconds the animation should be played String stopTrigger The name of the trigger in the animator which stops the animation; if it is not set, the start trigger will be called again to toggle the animation Methods Execute(Agent) Starts the execution of the task; starts the animation Declaration public override void Execute(Agent agent) Parameters Type Name Description Agent agent The agent on which the task is executed Overrides AgentBaseTask.Execute(Agent) Update() Called every frame as long as the task is active Makes sure that the animation is played for the configured time frame Declaration public override void Update() Overrides AgentBaseTask.Update() Implements IAgentTask"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentBaseTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentBaseTask.html",
    "title": "Class AgentBaseTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed Inheritance Object AgentBaseTask AgentAnimationTask AgentMovementTask AgentWaitTask Implements IAgentTask Namespace : i5.VirtualAgents.TaskSystem.AgentTasks Assembly : cs.temp.dll.dll Syntax public abstract class AgentBaseTask : IAgentTask Constructors AgentBaseTask() Creates a new task Declaration public AgentBaseTask() Properties CanStart Indicates whether this task is ready to start execution Checks whether all depending tasks are finished Can be overridden to add custom conditions in child classes Declaration public virtual bool CanStart { get; } Property Value Type Description Boolean DependsOnTasks List of tasks which need to finish first in order for this task to start Declaration public List<IAgentTask> DependsOnTasks { get; protected set; } Property Value Type Description List < IAgentTask > IsFinished Indicates whether the task is finished Declaration public bool IsFinished { get; protected set; } Property Value Type Description Boolean Methods Execute(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration public virtual void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which should execute this task FinishTask() Marks the task as finished for the executing agent This will raise the OnTaskFinished event in the base class Use this method to finish the task as invoking the event in derived classes is not possible ( https://stackoverflow.com/a/31661451 ) Declaration protected virtual void FinishTask() Update() Called by the executing agent on running tasks Performs frame-to-frame task execution updates This is e.g. useful for tracking movements towards a target and determinig when the agent has reached the target Declaration public virtual void Update() WaitFor(AgentBaseTask[]) Indicates that the task has to wait for at least one oter task to finish first Adds the tasks to the list of dependencies Declaration public void WaitFor(params AgentBaseTask[] otherTasks) Parameters Type Name Description AgentBaseTask [] otherTasks The other tasks which have to finish before this task can start Events OnTaskFinished Event which is invoked once the task is finished Subscribed to by the agent's task manager so that the next task can be started afterwards Declaration public event Action OnTaskFinished Event Type Type Description Action Implements IAgentTask"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentMovementTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentMovementTask.html",
    "title": "Class AgentMovementTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component Inheritance Object AgentBaseTask AgentMovementTask Implements IAgentTask Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.OnTaskFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) Namespace : i5.VirtualAgents.TaskSystem.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentMovementTask : AgentBaseTask, IAgentTask Constructors AgentMovementTask(Vector3, Single) Create an AgentMovementTask using destination coordinates Declaration public AgentMovementTask(Vector3 destinationCoordinates, float targetSpeed = -1F) Parameters Type Name Description Vector3 destinationCoordinates The position to which the agent should move Single targetSpeed The target speed of the agent, e.g. to set running or walking; if not set, the default value in the NavMeshAgent is taken Fields navMeshAgent Reference to the NavMeshAgent component Declaration protected NavMeshAgent navMeshAgent Field Value Type Description NavMeshAgent Properties Destination Destination coordinates of the movement task Declaration public Vector3 Destination { get; protected set; } Property Value Type Description Vector3 TargetSpeed The target movement speed of the agent If negative, the default value set in the NavMeshAgent is taken Declaration public float TargetSpeed { get; protected set; } Property Value Type Description Single Methods Execute(Agent) Starts the movement task Declaration public override void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the movement task Overrides AgentBaseTask.Execute(Agent) Update() Checks every frame whether the agent has reached the target Declaration public override void Update() Overrides AgentBaseTask.Update() Implements IAgentTask"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentWaitTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentWaitTask.html",
    "title": "Class AgentWaitTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentWaitTask Makes the agent wait for a given amount of time Inheritance Object AgentBaseTask AgentWaitTask Implements IAgentTask Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.Update() AgentBaseTask.OnTaskFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) Namespace : i5.VirtualAgents.TaskSystem.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentWaitTask : AgentBaseTask, IAgentTask Constructors AgentWaitTask(Single) Creates a new instance of the wait task Declaration public AgentWaitTask(float timeInSeconds) Parameters Type Name Description Single timeInSeconds The number of secondsd that the agent should wait for Properties WaitTimeInSeconds The number of seconds that the agent should wait for Declaration public float WaitTimeInSeconds { get; set; } Property Value Type Description Single Methods Execute(Agent) Start the waiting task Called by the agent Declaration public override void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which executes this task Overrides AgentBaseTask.Execute(Agent) Implements IAgentTask"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.html",
    "title": "Namespace i5.VirtualAgents.TaskSystem.AgentTasks | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.TaskSystem.AgentTasks Classes AgentAnimationTask Starts an animation by setting the trigger in the animator belonging to the agent. It will stop it after playtime second using the stop trigger if provided or else the startTrigger again AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component AgentWaitTask Makes the agent wait for a given amount of time"
  },
  "api/i5.VirtualAgents.TaskSystem.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.html",
    "title": "Namespace i5.VirtualAgents.TaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.TaskSystem Classes AgentTaskManager AgentTaskQueue Holds an IAgentTask queue TaskActions List of shortcuts to schedule actions on an agent Interfaces IAgentTask Common methods and attributes for all AgentTasks Enums TaskState The different states that the agent's task manager can be in Delegates AgentTaskManager.TaskFinishedEvent Event handler for finished tasks"
  },
  "api/i5.VirtualAgents.TaskSystem.IAgentTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.IAgentTask.html",
    "title": "Interface IAgentTask | Documentation of the Virtual Agents Framework",
    "keywords": "Interface IAgentTask Common methods and attributes for all AgentTasks Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public interface IAgentTask Properties CanStart Indicates whether the task can start its execution False if there are unfulfilled conditions that block the execution Declaration bool CanStart { get; } Property Value Type Description Boolean IsFinished Indicates whether the task has finished its execution Declaration bool IsFinished { get; } Property Value Type Description Boolean Methods Execute(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which should execute this task Update() Called by the executing agent on running tasks Performs frame-to-frame task execution updates This is e.g. useful for tracking movements towards a target and determinig when the agent has reached the target Declaration void Update() Events OnTaskFinished Event which is invoked once the task is finished Subscribed to by the agent's task manager so that the next task can be started afterwards Declaration event Action OnTaskFinished Event Type Type Description Action"
  },
  "api/i5.VirtualAgents.TaskSystem.TaskActions.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.TaskActions.html",
    "title": "Class TaskActions | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskActions List of shortcuts to schedule actions on an agent Inheritance Object TaskActions Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public class TaskActions Constructors TaskActions(Agent) Creates a new task actions shortcut and registers the agent on which the tasks are scheduled Declaration public TaskActions(Agent agent) Parameters Type Name Description Agent agent The agent on which the tasks are scheduled and executed Methods GoTo(GameObject, Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(GameObject destinationObject, Vector3 offset = null, int priority = 0) Parameters Type Name Description GameObject destinationObject GameObject the agent should go to Vector3 offset Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoTo(Transform, Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(Transform destinationTransform, Vector3 offset = null, int priority = 0) Parameters Type Name Description Transform destinationTransform Vector3 offset Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoTo(Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(Vector3 destinationCoordinates, int priority = 0) Parameters Type Name Description Vector3 destinationCoordinates Position the agent should go to Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask PlayAnimation(String, Single, String, Int32, String) Play an animation through the agents animation controller Shortcut queue management function Declaration public AgentBaseTask PlayAnimation(string startTrigger, float playTime, string stopTrigger = \"\", int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description String startTrigger Single playTime String stopTrigger Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. String layer Returns Type Description AgentBaseTask WaitForSeconds(Single, Int32, String) Lets the agent wait for the given number of seconds in an idle position Shortcut queue management function Declaration public AgentBaseTask WaitForSeconds(float seconds, int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description Single seconds The time span in seconds for which the agent shoudl wait Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. String layer The animation layer on which the task should be excuted Returns Type Description AgentBaseTask"
  },
  "api/i5.VirtualAgents.TaskSystem.TaskState.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.TaskState.html",
    "title": "Enum TaskState | Documentation of the Virtual Agents Framework",
    "keywords": "Enum TaskState The different states that the agent's task manager can be in Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public enum TaskState Fields Name Description busy The agent is busy and is currently executing a task idle An idle state where nothing is to do and new tasks can be started inactive The task manager is inactive, e.g. if no agent is associated with it yet or if it has been deactived deliberately In an inactive state, no tasks are executed or started waiting The agent waits for a condition to become true so that the next task can be started"
  },
  "index.html": {
    "href": "index.html",
    "title": "Virtual Agents Framework | Documentation of the Virtual Agents Framework",
    "keywords": "Virtual Agents Framework A Unity package for creating virtual agents. This framework provides the architecture, assets and samples for creating own virtual agents, also called non-player characters (NPCs), in Unity. Setup Minimum Unity version: 2020.3. There are different ways to add the package to a project. Alternative 1: OpenUPM using the Package Manager UI The first option to install the package is to include it via Unity's package manager. Here, we first need to add a scoped registry which tells Unity that the package is hosted on OpenUPM . After that, we can add the package in Unity's package manager window. In Unity, go to Window > Package Manager to open the package manager UI. In the right corner of the opened windows, click on the small cogwheel and select \"Advanced Project Settings\". Add a new scoped registry with the following values: Field Value(s) Name: package.openupm.com URL: https://package.openupm.com Scope(s): com.i5.toolkit.core com.i5.virtualagents Next, click the Save/Apply button. Close the settings window and return to the package manager window. Click the small plus button at the left top of the window. Select \"\"Add package by name...\" or \"Add package from git URL...\" depending on your Unity version. Enter com.i5.virtualagents in the text field. If the package manager asks for a version number, enter the latest one, so 1.1.0 . Click the add button and wait for the download to finish. As an alternative to steps 7 - 8, the package should also be available in the list if you switch the dropdown next to the plus button from \"Packages: Unity Registry\" to \"Packages: My Registries\". You can then select the entry and click the \"Install\" button. Alternative 2: OpenUPM with manifest.json file A second option is to directly edit the manifest.json file of your project. In alternative 1, Unity performs this in the background, but you can also just copy-paste the necessary scoped registry definitions and add the package directly in the manifest.json file. Open a file explorer and navigation into your project's root folder (the folder which contains sub-directories like \"Assets\" or \"Library\"). Then, navigate into the \"Packages\" folder and open the \"manifest.json\" file. Integrate the following json string into the manifest.json file: { \"scopedRegistries\": [ { \"name\": \"package.openupm.com\", \"url\": \"https://package.openupm.com\", \"scopes\": [ \"com.i5.toolkit.core\", \"com.i5.virtualagents\" ] } ], \"dependencies\": { \"com.i5.virtualagents\": \"1.1.0\" } } If your manifest.json file already contains a scopedRegistries array, make sure to add the entry to the existing one. If your scopedRegistries array already contains an entry with the name \"package.openupm.com\", just add the given scopes to that list. In that case, there is no need to create a second \"package.openupm.com\" entry. The entry \"com.i5.virtualagents\": \"1.1.0\" can be inserted anywhere in the dependencies object with the other installed packages that are already listed there. Alternative 3: Git Package You can also directly include the package as a Git repository. First, you need to install the i5 Toolkit for Unity by following one of its installation instructions in the readme file . This step needs to happen first - otherwise there is an error message as Unity cannot resolve the dependency. In Unity, go to \"Window > Package Manager\" to open the package manager window. Click the plus button in the top left corner and select \"Add package from git URL...\". Enter https://github.com/rwth-acis/Virtual-Agents-Framework.git#[version] into the text field where [version] is replaced with \"v\", followed by the release number, e.g. \"v1.1.0\" or upm for the latest version. Confirm the download by clicking on the \"add\" button. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated and you will not be notified about updates automatically. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Documentation Check out the documentation pages and select the version that you are using. You can also find practical examples of features in the package's samples. To access them, follow these steps: In Unity, go to \"Window > Package Manager\". Make sure that the dropdown menu in the top left of the package manager window is set to \"Packages: In Project\". Click on the entry for the Virtual Agents Framework in the list. On the right side, expand the samples section. Here, you can find a list of available examples. Click the import button to download the samples. They are saved in your Assets folder in a folder \"Samples/Virtual Agents Framework/1.1.0\". Usually, each sample contains a sample scene as the starting point. Within the scene, there is a documentation object, indicated by an information icon. If you click on it, there are further descriptions about the scene in the inspector. Licensing The package's code is distributed under the MIT license . All art assets (e.g. files located in the folders \"3D Models\" and \"Animations\" in the package's root folder) are distributed under the Creative Commons Attribution 4.0 International license and are attributed to Benedikt Hensen unless stated otherwise. Contributors Code & Documentation: Benedikt Hensen Danylo Bekhter Sebastian Meinberger 3D Models & Animations: Benedikt Hensen Related Projects This framework uses the i5 Toolkit for Unity which provides building blocks and modules for general development with the Unity 3D engine. If you want to use the virtual agents in mixed reality, check out our i5 Toolkit for Mixed Reality . It is an extension package that builds upon the functionality of the i5 Toolkit for Unity and is optimized for mixed reality."
  },
  "manual/own-agents.html": {
    "href": "manual/own-agents.html",
    "title": "Adding Own Agent Models and Animations | Documentation of the Virtual Agents Framework",
    "keywords": "Adding Own Agent Models and Animations The framework already provides a standard agent which can be added as a prefab. However, if you want to add your own character, for example from a 3D scan, this is also possible. Preparing the Character To create a new agent from scratch, first add a humanoid character to your project. The character needs to be rigged. So, it requires a skeleton that was set up in a 3D software like Blender. The rig is what drives the movements of the character and it defines which parts of the mesh are deformed during an animation. Import Into Unity In Unity's import settings, set the rig type to \"humanoid\" so that animations can be transferred to the new character. Check the configuration of the rig mapping to make sure that bones are correctly transferred to Unity's default humanoid rig. In this configuration, there are also more advanced settings for the muscles. Usually, you do not need to worry about them but if you want your agent to be more or less flexible than defined in the animations, you can accomplish this with the muscle settings. Setup in the Scene After finishing the setup, you can add the character to your scene. Next, add the Agent component to the character in the scene. This will automatically add the NavMeshAgent component and the AnimationSynchronizer component to the character. Because of its humanoid type, there should already be an Animator component on your agent. You need to assign an AnimationController to the Animator. It is recommended to choose the default \"StandardAnimationController\" which is provided by the framework. Optional: Adjust Animation Controller Usually, it suffices to take the existing standard controller as a basis. T extend the animation range of the agent, it is recommended to copy the existing controller and to extend it rather than starting with a blank controller. Howver, to create a controller from scratch, it needs to follow these guidelines: There needs to be a blend tree that mixes an idle and a walking animation so that the agent can walk. The blend tree is driven by an input parameter called \"Speed\". If you choose a different name, also adapt the parameter name on the AnimationSynchronizer component. Replacing Existing Animations with Own Ones If you just want to substitute the standard animations but keep the general structure of the controller, you can also copy the controller and substitute the animations with your own imported ones. If you choose a different walking animation for the blend tree, make sure to recalculate the threshold values according to the speed value of the animation. If the threshold value of the blend tree is incorrect, the agent's feet will slide along the ground during walking. Also, make sure to set up the NavMeshAgent component by determining the corresponding speed and rotation values. The speed of the NavMeshAgent component should correspond to the speed threshold value of the blend tree in the animator component. With a lower value, the agent will not be able to walk at the full speed as intended by the animation. A higher value will cause foot sliding as the animation is too slow to keep up with the movement speed."
  },
  "manual/parallel-tasks.html": {
    "href": "manual/parallel-tasks.html",
    "title": "Parallel Tasks | Documentation of the Virtual Agents Framework",
    "keywords": "Parallel Tasks Tasks cannot only be executed sequentially but also in parallel if they, e.g., affect different regions of the agent's body. This means that an agent can, e.g., walk while waving its hand at the same time. To realize this, the Virtual Agents Framework provides a parallel tasks structure where tasks can be scheduled independently but also be synchronized using dependencies between tasks. Parallel Structure The agent consists of a series of task managers which determine which task to execute next. By calling ScheduleTask without specifying a layer, the task, by default, affects the entire body. Apart from this, there is a separate task manager for each relevant body region of the agent. Currently, this includes the following body regions: Left Arm Right Arm Head When applying parallel tasks, the main use case is to layer animations. It is recommended to always assign an animation task to the base layer and then overwrite a specific body region with a custom animation. In the example of the walking agent which is waving its hand, the walking animation would be set up as a task on the base layer. The waving animation is scheduled as a task on one of the two arm regions. As a result, the agent displays the full walking movements and only its arm is concerned with the waving motion. Synchronizing Task Layers In some cases, tasks need to wait for each other to start synchronously. In more complex tasks, this can be achieved by implementing a start condition on the tasks using the CanStart property. This pre-condition can contain any Boolean expression. A task can, e.g., wait for another task but it can also wait for a specific condition in the agent's environment to become true. Apart from this general purpose start-condition, the AgentBaseTask also implements a dependency system where tasks can automatically wait for each other. If task a depends on the completion of task b and both inherit from AgentBaseTask , call a.WaitFor(b) . Internally, WaitFor creates a pre-condition for task a . The CanStart property of a will only become true , once b has finished its execution, indicated by its IsFinished property. If task a depends on multiple tasks b and c , they can quickly be defined in WaitFor by listing all depending tasks as a.WaitFor(b, c) . Example Scenes The framework contains two example scenes: One of them demonstrates the independent execution of parallel tasks. Here, the agent is assigned a series of walking tasks on its base layer and a combination of waiting and waving tasks on its left arm layer, as well as a head-shaking animation for the head. The tasks are just executed but do not contain any synchronization. In contract to this, the synchronization sample contains the same task sequence but here, the second waving animation will wait for the head shaking animation to complete. Both samples contain a TasksSampleController which demonstrates how to schedule the tasks and how to set the dependencies."
  },
  "manual/task-system.html": {
    "href": "manual/task-system.html",
    "title": "Task System | Documentation of the Virtual Agents Framework",
    "keywords": "Task System A possible way to influence the agent's behavior is to assign tasks to the agent which the agent then works on. Tasks Tasks are the elements which tell the agent what to do. Structure All tasks need to implement the IAgentTask interface. It determines the necessary methods that a task must have like Execute(Agent) to start the task's execution or Update() which is called every frame during the execution. Pre-Implemented Tasks The Virtual Agents Framework contains an ever-growing collection of pre-implemented tasks. These tasks are meant as a starting point for composing behaviors of agents. Currently, the following tasks exist and can already be used: AgentAnimationTask : Play animations on the agent AgentMovementTask : Let the agent walk to a given location AgentWaitTask : Let the agent wait for a specific amount of time Adding Own Tasks In addition to the pre-implemented tasks, developers can also add own tasks that implement the IAgentTask interface. It is recommended to inherit from the AgentBaseTask class when creating new tasks. This base class already contains a lot of common logic for tasks, like marking a task as finished and then automatically invoking the event that is defined in the interface. If you have created a generic and configurable task that might be interesting to other developers, feel welcome to post a pull request on GitHub that contributes the task to the framework as a pre-implemented task. Task Scheduling Tasks are scheduled on agents using a priority queue. Each agent has a task manager which will evaluate the queue and start the execution of the next task. Scheduling a Task Instance on an Agent To assign a task to an agent, first create an instance of your task by calling its constructor. MyTask myTask = new MyTask(); Configure the task as required, e.g., by passing arguments to the constructor or by setting properties. After that, call ScheduleTask to schedule the task on a specific agent. Optionally, you can set the priority of the task. By default, it is set to 0, so negative values will be executed after all other tasks and positive values take priority over default tasks. The higher the number the earlier the task will be executed. Moreover, you can provide a layer argument to specify which animation layer the task affects. The agent is set up with different layers so that multiple actions can happen in parallel. By default the \"Base Layer\" is chosen, so it affects the entire body of the agent. For more information on parallel layers see the documentation on parallel tasks . Shortcuts In order to keep the code brief and understandable, it is not always necessary to create the task instance object yourself and to schedule it on the agent explicitly. For common actions, it is also possible to call one of the shortcut functions on the agent. Currently, the following shortcut functions exist: GoTo GoTo(Vector3, Int32) : Let the agent walk to the specified coordinates. GoTo(Transform, Vector3, Int32) : Let the agent walk to the specified transform of an object in the scene. You can add an optional offset so that the agent does not run into the object but stops next to it. GoTo(GameObject, Vector3, Int32) : Let the agent walk to the specified object in the scene. You can add an optional offset so that the agent does not run into the object but stops next to it. WaitForSeconds : The agent waits for the given amount of seconds. PlayAnimation : Play an animation for the given time. Specify a start and stop trigger which will cause the animation to start and stop in the animator. If you add you own animations, set them up in a way that there are transitions in and out of your animation with the start and stop triggers set as conditions for entering the transition."
  }
}