{
  "api/i5.VirtualAgents.Agent.html": {
    "href": "api/i5.VirtualAgents.Agent.html",
    "title": "Class Agent | Documentation of the Virtual Agents Framework",
    "keywords": "Class Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly Inheritance Object Agent Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class Agent : MonoBehaviour Properties Tasks List of shortcut methods to add common tasks to the agent's task queue Syntactic sugar. It is also possible to directly enqueue task objects on the agent instead, e.g. for custom tasks Declaration public TaskActions Tasks { get; } Property Value Type Description TaskActions Methods ScheduleTask(IAgentTask, Int32) Schedule a task Declaration public void ScheduleTask(IAgentTask task, int priority) Parameters Type Name Description IAgentTask task Task to be scheduled Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value"
  },
  "api/i5.VirtualAgents.AgentAnimationUpdater.html": {
    "href": "api/i5.VirtualAgents.AgentAnimationUpdater.html",
    "title": "Class AgentAnimationUpdater | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation Inheritance Object AgentAnimationUpdater Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class AgentAnimationUpdater : MonoBehaviour"
  },
  "api/i5.VirtualAgents.html": {
    "href": "api/i5.VirtualAgents.html",
    "title": "Namespace i5.VirtualAgents | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents Classes Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTaskManager.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTaskManager.html",
    "title": "Class AgentTaskManager | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskManager Inheritance Object AgentTaskManager Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public class AgentTaskManager Constructors AgentTaskManager() Creates a new task manager but does not yet associate an agent with it If you use this method, you need to call the AssociateAgent method at some point before scheduled tasks can be executed Declaration public AgentTaskManager() AgentTaskManager(Agent) Creates a new task manager and associates with an agent Declaration public AgentTaskManager(Agent agent) Parameters Type Name Description Agent agent The agent on which scheduled tasks should be executed Properties CurrentState Agent's current state Declaration public TaskState CurrentState { get; } Property Value Type Description TaskState CurrentTask Agent's current task Declaration public IAgentTask CurrentTask { get; } Property Value Type Description IAgentTask ExecutingAgent Agent which will execute the scheduled tasks Declaration public Agent ExecutingAgent { get; } Property Value Type Description Agent Methods AssociateAgent(Agent) Associates an agent with the task manager Scheduled tasks can only run if an agent was registered with the task manager, either using this method or the constructor which takes an agent as an argument Declaration public void AssociateAgent(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the scheduled tasks ScheduleTask(IAgentTask, Int32) Schedules a task in the queue, sorted by the given priority Declaration public void ScheduleTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task The task that should be scheduled for execution Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Update() Enable the right mode depending on the agent's status Declaration public void Update() Events OnStateChanged Event which is raised once the agent's state changes Declaration public event Action OnStateChanged Event Type Type Description Action OnTaskFinished Event which is raised once the agent has finished the current task Declaration public event Action OnTaskFinished Event Type Type Description Action"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTaskQueue.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTaskQueue.html",
    "title": "Class AgentTaskQueue | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskQueue Holds an IAgentTask queue Inheritance Object AgentTaskQueue Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public class AgentTaskQueue Constructors AgentTaskQueue() Create an empty IAgentTask queue Declaration public AgentTaskQueue() Methods AddTask(IAgentTask, Int32) Add a new task to the queue according to the FIFO principle but with priority categories Declaration public void AddTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task Any task that implements the IAgentTask interface Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. RequestNextTask() Request the next task from the queue Declaration public IAgentTask RequestNextTask() Returns Type Description IAgentTask Next task from the queue or null if the queue is empty"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentBaseTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentBaseTask.html",
    "title": "Class AgentBaseTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed Inheritance Object AgentBaseTask Implements IAgentTask Namespace : i5.VirtualAgents.TaskSystem.AgentTasks Assembly : cs.temp.dll.dll Syntax public abstract class AgentBaseTask : IAgentTask Methods Execute(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration public virtual void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which should execute this task MarkAsFinished() Marks the task as finished for the executing agent This will raise the OnTaskFinished event in the base class Use this method to finish the task as invoking the event in derived classes is not possible ( https://stackoverflow.com/a/31661451 ) Declaration protected virtual void MarkAsFinished() Update() Called by the executing agent on running tasks Performs frame-to-frame task execution updates This is e.g. useful for tracking movements towards a target and determinig when the agent has reached the target Declaration public virtual void Update() Events OnTaskFinished Event which is invoked once the task is finished Subscribed to by the agent's task manager so that the next task can be started afterwards Declaration public event Action OnTaskFinished Event Type Type Description Action Implements IAgentTask"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentMovementTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.AgentMovementTask.html",
    "title": "Class AgentMovementTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component Inheritance Object AgentMovementTask Implements IAgentTask Namespace : i5.VirtualAgents.TaskSystem.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentMovementTask : IAgentTask Constructors AgentMovementTask(Vector3, Single) Create an AgentMovementTask using destination coordinates Declaration public AgentMovementTask(Vector3 destinationCoordinates, float targetSpeed = -1F) Parameters Type Name Description Vector3 destinationCoordinates The position to which the agent should move Single targetSpeed The target speed of the agent, e.g. to set running or walking; if not set, the default value in the NavMeshAgent is taken Fields navMeshAgent Reference to the NavMeshAgent component Declaration protected NavMeshAgent navMeshAgent Field Value Type Description NavMeshAgent Properties Destination Destination coordinates of the movement task Declaration public Vector3 Destination { get; protected set; } Property Value Type Description Vector3 TargetSpeed The target movement speed of the agent If negative, the default value set in the NavMeshAgent is taken Declaration public float TargetSpeed { get; protected set; } Property Value Type Description Single Methods Execute(Agent) Starts the movement task Declaration public void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the movement task Update() Checks every frame whether the agent has reached the target Declaration public void Update() Events OnTaskFinished Event which is invoked once the task is finished Declaration public event Action OnTaskFinished Event Type Type Description Action Implements IAgentTask"
  },
  "api/i5.VirtualAgents.TaskSystem.AgentTasks.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.AgentTasks.html",
    "title": "Namespace i5.VirtualAgents.TaskSystem.AgentTasks | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.TaskSystem.AgentTasks Classes AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component"
  },
  "api/i5.VirtualAgents.TaskSystem.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.html",
    "title": "Namespace i5.VirtualAgents.TaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.TaskSystem Classes AgentTaskManager AgentTaskQueue Holds an IAgentTask queue TaskActions List of shortcuts to schedule actions on an agent Interfaces IAgentTask Common methods and attributes for all AgentTasks Enums TaskState The different states that the agent's task manager can be in"
  },
  "api/i5.VirtualAgents.TaskSystem.IAgentTask.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.IAgentTask.html",
    "title": "Interface IAgentTask | Documentation of the Virtual Agents Framework",
    "keywords": "Interface IAgentTask Common methods and attributes for all AgentTasks Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public interface IAgentTask Methods Execute(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration void Execute(Agent agent) Parameters Type Name Description Agent agent The agent which should execute this task Update() Called by the executing agent on running tasks Performs frame-to-frame task execution updates This is e.g. useful for tracking movements towards a target and determinig when the agent has reached the target Declaration void Update() Events OnTaskFinished Event which is invoked once the task is finished Subscribed to by the agent's task manager so that the next task can be started afterwards Declaration event Action OnTaskFinished Event Type Type Description Action"
  },
  "api/i5.VirtualAgents.TaskSystem.TaskActions.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.TaskActions.html",
    "title": "Class TaskActions | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskActions List of shortcuts to schedule actions on an agent Inheritance Object TaskActions Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public class TaskActions Constructors TaskActions(Agent) Creates a new task actions shortcut and registers the agent on which the tasks are scheduled Declaration public TaskActions(Agent agent) Parameters Type Name Description Agent agent The agent on which the tasks are scheduled and executed Methods GoTo(GameObject, Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public void GoTo(GameObject destinationObject, Vector3 offset = null, int priority = 0) Parameters Type Name Description GameObject destinationObject GameObject the agent should go to Vector3 offset Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. GoTo(Transform, Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public void GoTo(Transform destinationTransform, Vector3 offset = null, int priority = 0) Parameters Type Name Description Transform destinationTransform Vector3 offset Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. GoTo(Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public void GoTo(Vector3 destinationCoordinates, int priority = 0) Parameters Type Name Description Vector3 destinationCoordinates Position the agent should go to Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0."
  },
  "api/i5.VirtualAgents.TaskSystem.TaskState.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.TaskState.html",
    "title": "Enum TaskState | Documentation of the Virtual Agents Framework",
    "keywords": "Enum TaskState The different states that the agent's task manager can be in Namespace : i5.VirtualAgents.TaskSystem Assembly : cs.temp.dll.dll Syntax public enum TaskState Fields Name Description busy The agent is busy and is currently executing a task idle An idle state where nothing is to do and new tasks can be started inactive The task manager is inactive, e.g. if no agent is associated with it yet or if it has been deactived deliberately In an inactive state, no tasks are executed or started"
  },
  "index.html": {
    "href": "index.html",
    "title": "Virtual Agents Framework | Documentation of the Virtual Agents Framework",
    "keywords": "Virtual Agents Framework A Unity package for creating virtual agents. This framework provides the architecture, assets and samples for creating own virtual agents, also called non-player characters (NPCs), in Unity. Setup Minimum Unity version: 2020.3. There are different ways to add the package to a project. Alternative 1: OpenUPM using the Package Manager UI The first option to install the package is to include it via Unity's package manager. Here, we first need to add a scoped registry which tells Unity that the package is hosted on OpenUPM . After that, we can add the package in Unity's package manager window. In Unity, go to Window > Package Manager to open the package manager UI. In the right corner of the opened windows, click on the small cogwheel and select \"Advanced Project Settings\". Add a new scoped registry with the following values: Field Value(s) Name: package.openupm.com URL: https://package.openupm.com Scope(s): com.i5.toolkit.core com.i5.virtualagents Next, click the Save/Apply button. Close the settings window and return to the package manager window. Click the small plus button at the left top of the window. Select \"\"Add package by name...\" or \"Add package from git URL...\" depending on your Unity version. Enter com.i5.virtualagents in the text field. If the package manager asks for a version number, enter the latest one, so 1.0.0 . Click the add button and wait for the download to finish. As an alternative to steps 7 - 8, the package should also be available in the list if you switch the dropdown next to the plus button from \"Packages: Unity Registry\" to \"Packages: My Registries\". You can then select the entry and click the \"Install\" button. Alternative 2: OpenUPM with manifest.json file A second option is to directly edit the manifest.json file of your project. In alternative 1, Unity performs this in the background, but you can also just copy-paste the necessary scoped registry definitions and add the package directly in the manifest.json file. Open a file explorer and navigation into your project's root folder (the folder which contains sub-directories like \"Assets\" or \"Library\"). Then, navigate into the \"Packages\" folder and open the \"manifest.json\" file. Integrate the following json string into the manifest.json file: { \"scopedRegistries\": [ { \"name\": \"package.openupm.com\", \"url\": \"https://package.openupm.com\", \"scopes\": [ \"com.i5.toolkit.core\", \"com.i5.virtualagents\" ] } ], \"dependencies\": { \"com.i5.virtualagents\": \"1.0.0\" } } If your manifest.json file already contains a scopedRegistries array, make sure to add the entry to the existing one. If your scopedRegistries array already contains an entry with the name \"package.openupm.com\", just add the given scopes to that list. In that case, there is no need to create a second \"package.openupm.com\" entry. The entry \"com.i5.virtualagents\": \"1.0.0\" can be inserted anywhere in the dependencies object with the other installed packages that are already listed there. Alternative 3: Git Package You can also directly include the package as a Git repository. First, you need to install the i5 Toolkit for Unity by following one of its installation instructions in the readme file . This step needs to happen first - otherwise there is an error message as Unity cannot resolve the dependency. In Unity, go to \"Window > Package Manager\" to open the package manager window. Click the plus button in the top left corner and select \"Add package from git URL...\". Enter https://github.com/rwth-acis/Virtual-Agents-Framework.git#[version] into the text field where [version] is replaced with \"v\", followed by the release number, e.g. \"v1.0.0\" or upm for the latest version. Confirm the download by clicking on the \"add\" button. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated and you will not be notified about updates automatically. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Documentation Check out the documentation pages and select the version that you are using. You can also find practical examples of features in the package's samples. To access them, follow these steps: In Unity, go to \"Window > Package Manager\". Make sure that the dropdown menu in the top left of the package manager window is set to \"Packages: In Project\". Click on the entry for the Virtual Agents Framework in the list. On the right side, expand the samples section. Here, you can find a list of available examples. Click the import button to download the samples. They are saved in your Assets folder in a folder \"Samples/Virtual Agents Framework/1.0.0\". Usually, each sample contains a sample scene as the starting point. Within the scene, there is a documentation object, indicated by an information icon. If you click on it, there are further descriptions about the scene in the inspector. Licensing The package's code is distributed under the MIT license . All art assets (e.g. files located in the folders \"3D Models\" and \"Animations\" in the package's root folder) are distributed under the Creative Commons Attribution 4.0 International license and are attributed to Benedikt Hensen unless stated otherwise. Contributors Code & Documentation: Benedikt Hensen Danylo Bekhter Sebastian Meinberger 3D Models & Animations: Benedikt Hensen Related Projects This framework uses the i5 Toolkit for Unity which provides building blocks and modules for general development with the Unity 3D engine. If you want to use the virtual agents in mixed reality, check out our i5 Toolkit for Mixed Reality . It is an extension package that builds upon the functionality of the i5 Toolkit for Unity and is optimized for mixed reality."
  },
  "manual/own-agents.html": {
    "href": "manual/own-agents.html",
    "title": "Adding Own Agent Models and Animations | Documentation of the Virtual Agents Framework",
    "keywords": "Adding Own Agent Models and Animations The framework already provides a standard agent which can be added as a prefab. However, if you want to add your own character, for example from a 3D scan, this is also possible. Preparing the Character To create a new agent from scratch, first add a humanoid character to your project. The character needs to be rigged. So, it requires a skeleton that was set up in a 3D software like Blender. The rig is what drives the movements of the character and it defines which parts of the mesh are deformed during an animation. Import Into Unity In Unity's import settings, set the rig type to \"humanoid\" so that animations can be transferred to the new character. Check the configuration of the rig mapping to make sure that bones are correctly transferred to Unity's default humanoid rig. In this configuration, there are also more advanced settings for the muscles. Usually, you do not need to worry about them but if you want your agent to be more or less flexible than defined in the animations, you can accomplish this with the muscle settings. Setup in the Scene After finishing the setup, you can add the character to your scene. Next, add the Agent component to the character in the scene. This will automatically add the NavMeshAgent component and the AnimationSynchronizer component to the character. Because of its humanoid type, there should already be an Animator component on your agent. You need to assign an AnimationController to the Animator. It is recommended to choose the default \"StandardAnimationController\" which is provided by the framework. Optional: Adjust Animation Controller Usually, it suffices to take the existing standard controller as a basis. T extend the animation range of the agent, it is recommended to copy the existing controller and to extend it rather than starting with a blank controller. Howver, to create a controller from scratch, it needs to follow these guidelines: There needs to be a blend tree that mixes an idle and a walking animation so that the agent can walk. The blend tree is driven by an input parameter called \"Speed\". If you choose a different name, also adapt the parameter name on the AnimationSynchronizer component. Replacing Existing Animations with Own Ones If you just want to substitute the standard animations but keep the general structure of the controller, you can also copy the controller and substitute the animations with your own imported ones. If you choose a different walking animation for the blend tree, make sure to recalculate the threshold values according to the speed value of the animation. If the threshold value of the blend tree is incorrect, the agent's feet will slide along the ground during walking. Also, make sure to set up the NavMeshAgent component by determining the corresponding speed and rotation values. The speed of the NavMeshAgent component should correspond to the speed threshold value of the blend tree in the animator component. With a lower value, the agent will not be able to walk at the full speed as intended by the animation. A higher value will cause foot sliding as the animation is too slow to keep up with the movement speed."
  }
}