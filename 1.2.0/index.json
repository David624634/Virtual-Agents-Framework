{
  "api/i5.VirtualAgents.AdaptiveGaze.html": {
    "href": "api/i5.VirtualAgents.AdaptiveGaze.html",
    "title": "Class AdaptiveGaze | Documentation of the Virtual Agents Framework",
    "keywords": "Class AdaptiveGaze Defines a gaze behaviour that looks at gaze targets in the scene dynamiycally Inheritance Object AdaptiveGaze Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class AdaptiveGaze : MonoBehaviour Methods Activate() Declaration public void Activate() Deactivate() Declaration public void Deactivate()"
  },
  "api/i5.VirtualAgents.AdaptiveGazeTarget.html": {
    "href": "api/i5.VirtualAgents.AdaptiveGazeTarget.html",
    "title": "Class AdaptiveGazeTarget | Documentation of the Virtual Agents Framework",
    "keywords": "Class AdaptiveGazeTarget Inheritance Object AdaptiveGazeTarget Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class AdaptiveGazeTarget : MonoBehaviour Fields canCurrentlyBeLookedAt Can be used to switch the object's perceivability off. This is de/activated by the item component, when the item is dropped/picked up. Declaration public bool canCurrentlyBeLookedAt Field Value Type Description Boolean importance The importance of the item for the agent. The higher the value, the more liekly it is the agent to look at it. Increases during runtime resets novelty for the agent Declaration public float importance Field Value Type Description Single"
  },
  "api/i5.VirtualAgents.Agent.html": {
    "href": "api/i5.VirtualAgents.Agent.html",
    "title": "Class Agent | Documentation of the Virtual Agents Framework",
    "keywords": "Class Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly Inheritance Object Agent Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class Agent : MonoBehaviour Properties Animator The animator component which controls the agent's animations Declaration public Animator Animator { get; } Property Value Type Description Animator TaskSystem Declaration public ITaskSystem TaskSystem { get; } Property Value Type Description ITaskSystem"
  },
  "api/i5.VirtualAgents.AgentAnimationUpdater.html": {
    "href": "api/i5.VirtualAgents.AgentAnimationUpdater.html",
    "title": "Class AgentAnimationUpdater | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation Inheritance Object AgentAnimationUpdater Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class AgentAnimationUpdater : MonoBehaviour"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentAnimationTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentAnimationTask.html",
    "title": "Class AgentAnimationTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentAnimationTask Starts an animation by setting the trigger in the animator belonging to the agent. It will stop it after playtime second using the stop trigger if provided or else the startTrigger again Inheritance Object BaseTask AgentBaseTask AgentAnimationTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) BaseTask.State BaseTask.EvaluateTaskState() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentAnimationTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentAnimationTask() Declaration public AgentAnimationTask() AgentAnimationTask(String, Single, String, String, GameObject) Declaration public AgentAnimationTask(string startTrigger, float playTime, string stopTrigger = \"\", string layer = \"\", GameObject aimTarget = null) Parameters Type Name Description String startTrigger Single playTime String stopTrigger String layer GameObject aimTarget Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the execution of the task; starts the animation Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent on which the task is executed Overrides BaseTask.StartExecution(Agent) StopExecution() Stops the animation Declaration public override void StopExecution() Overrides BaseTask.StopExecution() Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentBaseTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentBaseTask.html",
    "title": "Class AgentBaseTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed Inheritance Object BaseTask AgentBaseTask AgentAnimationTask AgentDropTask AgentMovementTask AgentPickUpTask AgentWaitTask DebugTask Implements IAgentTask ITask Inherited Members BaseTask.State BaseTask.EvaluateTaskState() BaseTask.StartExecution(Agent) BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public abstract class AgentBaseTask : BaseTask, IAgentTask, ITask Constructors AgentBaseTask() Creates a new task Declaration public AgentBaseTask() Properties CanStart Indicates whether this task is ready to start execution Checks whether all depending tasks are finished Can be overridden to add custom conditions in child classes Declaration public virtual bool CanStart { get; } Property Value Type Description Boolean DependsOnTasks List of tasks which need to finish first in order for this task to start Declaration public List<IAgentTask> DependsOnTasks { get; protected set; } Property Value Type Description List < IAgentTask > IsFinished Indicates whether the task is finished Declaration public bool IsFinished { get; protected set; } Property Value Type Description Boolean Methods FinishTask() Declaration public virtual void FinishTask() WaitFor(AgentBaseTask[]) Indicates that the task has to wait for at least one oter task to finish first Adds the tasks to the list of dependencies Declaration public void WaitFor(params AgentBaseTask[] otherTasks) Parameters Type Name Description AgentBaseTask [] otherTasks The other tasks which have to finish before this task can start Implements IAgentTask ITask"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentDropTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentDropTask.html",
    "title": "Class AgentDropTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentDropTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component Inheritance Object BaseTask AgentBaseTask AgentDropTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) BaseTask.State BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentDropTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentDropTask() Declaration public AgentDropTask() AgentDropTask(GameObject) Create an AgentDropTask using the object that is currently carried and should be dropped, if no object is given, the agent will drop all objects that are currently carried Declaration public AgentDropTask(GameObject dropObject = null) Parameters Type Name Description GameObject dropObject The object that the agent should drop Properties DropObject Object that should be picked up Declaration public GameObject DropObject { get; } Property Value Type Description GameObject Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the drop task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the drop task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentMovementTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentMovementTask.html",
    "title": "Class AgentMovementTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component Inheritance Object BaseTask AgentBaseTask AgentMovementTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) BaseTask.State BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentMovementTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentMovementTask() Declaration public AgentMovementTask() AgentMovementTask(GameObject, Single, Boolean) Create an AgentMovementTask using a destination object Declaration public AgentMovementTask(GameObject destinationObject, float targetSpeed = -1F, bool followGameObject = false) Parameters Type Name Description GameObject destinationObject The object that the agent should move to or follow Single targetSpeed The target speed of the agent, e.g. to set running or walking; if not set, the default value in the NavMeshAgent is taken Boolean followGameObject Determines if the agent should follow the DestinationObject automatically, even when path is noncomplete AgentMovementTask(Vector3, Single) Create an AgentMovementTask using destination coordinates Declaration public AgentMovementTask(Vector3 destinationCoordinates, float targetSpeed = -1F) Parameters Type Name Description Vector3 destinationCoordinates The position to which the agent should move Single targetSpeed The target speed of the agent, e.g. to set running or walking; if not set, the default value in the NavMeshAgent is taken Fields navMeshAgent Reference to the NavMeshAgent component Declaration protected NavMeshAgent navMeshAgent Field Value Type Description NavMeshAgent Properties Destination Destination coordinates of the movement task Declaration public Vector3 Destination { get; protected set; } Property Value Type Description Vector3 DestinationObject Destination Object of the movement task Declaration public GameObject DestinationObject { get; protected set; } Property Value Type Description GameObject MinDistance Minimum distance of the agent to the target so that the task is considered finished Declaration public float MinDistance { get; set; } Property Value Type Description Single PathUpdateInterval Number of seconds after which the path will be recalculated Declaration public float PathUpdateInterval { get; set; } Property Value Type Description Single TargetSpeed The target movement speed of the agent If negative, the default value set in the NavMeshAgent is taken Declaration public float TargetSpeed { get; protected set; } Property Value Type Description Single Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer EvaluateTaskState() Checks every frame whether the agent has reached the target Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState Overrides BaseTask.EvaluateTaskState() Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the movement task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the movement task Overrides BaseTask.StartExecution(Agent) StopExecution() Finish the task Declaration public override void StopExecution() Overrides BaseTask.StopExecution() Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentPickUpTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentPickUpTask.html",
    "title": "Class AgentPickUpTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentPickUpTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component Inheritance Object BaseTask AgentBaseTask AgentPickUpTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) BaseTask.State BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentPickUpTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentPickUpTask() Declaration public AgentPickUpTask() AgentPickUpTask(GameObject, SocketId) Create an AgentPickUpTask using the object that should be picked up Declaration public AgentPickUpTask(GameObject pickupObject, SocketId socketId = null) Parameters Type Name Description GameObject pickupObject The object that the agent should pick up SocketId socketId Bodypart that the object should be attached to, standard is the right Hand Properties PickupObject Object that should be picked up Declaration public GameObject PickupObject { get; protected set; } Property Value Type Description GameObject SocketId Bodypart that the object should attached to Declaration public SocketId SocketId { get; protected set; } Property Value Type Description SocketId Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer IKWeightIncrease(Agent, Item) Declaration public IEnumerator IKWeightIncrease(Agent agent, Item item) Parameters Type Name Description Agent agent Item item Returns Type Description IEnumerator PickUpObject(Agent, Item) Declaration public void PickUpObject(Agent agent, Item item) Parameters Type Name Description Agent agent Item item Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Starts the pickUp task Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the pickUP task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.AgentWaitTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.AgentWaitTask.html",
    "title": "Class AgentWaitTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentWaitTask Makes the agent wait for a given amount of time Inheritance Object BaseTask AgentBaseTask AgentWaitTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) BaseTask.State BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class AgentWaitTask : AgentBaseTask, IAgentTask, ITask, ISerializable Constructors AgentWaitTask() Declaration public AgentWaitTask() AgentWaitTask(Single) Creates a new instance of the wait task Declaration public AgentWaitTask(float timeInSeconds) Parameters Type Name Description Single timeInSeconds The number of secondsd that the agent should wait for Properties WaitTimeInSeconds The number of seconds that the agent should wait for Declaration public float WaitTimeInSeconds { get; set; } Property Value Type Description Single Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Start the waiting task Called by the agent Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent The agent which executes this task Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.DebugTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.DebugTask.html",
    "title": "Class DebugTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class DebugTask Inheritance Object BaseTask AgentBaseTask DebugTask Implements IAgentTask ITask ISerializable Inherited Members AgentBaseTask.DependsOnTasks AgentBaseTask.CanStart AgentBaseTask.IsFinished AgentBaseTask.FinishTask() AgentBaseTask.WaitFor(AgentBaseTask[]) BaseTask.State BaseTask.EvaluateTaskState() BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class DebugTask : AgentBaseTask, IAgentTask, ITask, ISerializable Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Declaration public override void StartExecution(Agent agent) Parameters Type Name Description Agent agent Overrides BaseTask.StartExecution(Agent) Implements IAgentTask ITask ISerializable"
  },
  "api/i5.VirtualAgents.AgentTasks.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.html",
    "title": "Namespace i5.VirtualAgents.AgentTasks | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.AgentTasks Classes AgentAnimationTask Starts an animation by setting the trigger in the animator belonging to the agent. It will stop it after playtime second using the stop trigger if provided or else the startTrigger again AgentBaseTask Base class which provides default implementations for the interface methods Using this class avoids repeatedly implementing empty interface classes if they are not needed AgentDropTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component AgentMovementTask Defines movement tasks for walking and running Uses the NavMeshAgent component AgentPickUpTask Defines pick up tasks for picking up objects that are near to the agent Uses the NavMeshAgent component AgentWaitTask Makes the agent wait for a given amount of time DebugTask SerializationData<T> Pseudo dictonary, that in contrast to actual dictonaries is serializable, but only offers search in linear time. SerializationDataContainer SerializationEntry<T> Serialized data identified by a key. SerializedFloats SerializedGameobjects SerializedInts SerializedStrings SerializedVectors TaskSerializer Allows to serialize tasks that implement the ISerializable interface. Interfaces IAgentTask A task that directly manipualtes an agent ISerializable Allows a task be be serialized. Neccessary in order to use them with the visual Behaviour Tree editor. Enums SerializableType The types that can be serialized using the ISerializable interface."
  },
  "api/i5.VirtualAgents.AgentTasks.IAgentTask.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.IAgentTask.html",
    "title": "Interface IAgentTask | Documentation of the Virtual Agents Framework",
    "keywords": "Interface IAgentTask A task that directly manipualtes an agent Inherited Members ITask.State ITask.EvaluateTaskState() ITask.StartExecution(Agent) ITask.StopExecution() ITask.Tick(Agent) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public interface IAgentTask : ITask Properties CanStart Indicates whether the task can start its execution False if there are unfulfilled conditions that block the execution Declaration bool CanStart { get; } Property Value Type Description Boolean"
  },
  "api/i5.VirtualAgents.AgentTasks.ISerializable.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.ISerializable.html",
    "title": "Interface ISerializable | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ISerializable Allows a task be be serialized. Neccessary in order to use them with the visual Behaviour Tree editor. Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public interface ISerializable Methods Deserialize(SerializationDataContainer) Declaration void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer Serialize(SerializationDataContainer) Declaration void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializableType.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializableType.html",
    "title": "Enum SerializableType | Documentation of the Virtual Agents Framework",
    "keywords": "Enum SerializableType The types that can be serialized using the ISerializable interface. Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public enum SerializableType Fields Name Description FLOAT GAMEOBJECT INT STRING VECTOR3"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializationData-1.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializationData-1.html",
    "title": "Class SerializationData<T> | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializationData<T> Pseudo dictonary, that in contrast to actual dictonaries is serializable, but only offers search in linear time. Inheritance Object SerializationData<T> SerializedFloats SerializedGameobjects SerializedInts SerializedStrings SerializedVectors Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializationData<T> Type Parameters Name Description T Fields data Declaration public List<SerializationEntry<T>> data Field Value Type Description List < SerializationEntry <T>> Methods Add(String, T) Declaration public void Add(string key, T value) Parameters Type Name Description String key T value Clear() Declaration public void Clear() Get(Int32) Declaration public SerializationEntry<T> Get(int index) Parameters Type Name Description Int32 index Returns Type Description SerializationEntry <T> Get(String) Declaration public T Get(string key) Parameters Type Name Description String key Returns Type Description T KeyExists(String) Declaration public bool KeyExists(string key) Parameters Type Name Description String key Returns Type Description Boolean"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializationDataContainer.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializationDataContainer.html",
    "title": "Class SerializationDataContainer | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializationDataContainer Inheritance Object SerializationDataContainer Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializationDataContainer Fields serializationOrder Declaration public List<SerializableType> serializationOrder Field Value Type Description List < SerializableType > serializedFloats Declaration public SerializedFloats serializedFloats Field Value Type Description SerializedFloats serializedGameobjects Declaration public SerializedGameobjects serializedGameobjects Field Value Type Description SerializedGameobjects serializedInts Declaration public SerializedInts serializedInts Field Value Type Description SerializedInts serializedStrings Declaration public SerializedStrings serializedStrings Field Value Type Description SerializedStrings serializedVectors Declaration public SerializedVectors serializedVectors Field Value Type Description SerializedVectors Methods AddSerializedData(String, GameObject) Declaration public void AddSerializedData(string key, GameObject value) Parameters Type Name Description String key GameObject value AddSerializedData(String, Int32) Declaration public void AddSerializedData(string key, int value) Parameters Type Name Description String key Int32 value AddSerializedData(String, Single) Declaration public void AddSerializedData(string key, float value) Parameters Type Name Description String key Single value AddSerializedData(String, String) Declaration public void AddSerializedData(string key, string value) Parameters Type Name Description String key String value AddSerializedData(String, Vector3) Declaration public void AddSerializedData(string key, Vector3 value) Parameters Type Name Description String key Vector3 value Clear() Deletes everything that was serialized Declaration public void Clear() GetKeyByIndex(Int32, SerializableType) Retrives the key of the item at position index. Declaration public string GetKeyByIndex(int index, SerializableType type) Parameters Type Name Description Int32 index SerializableType type Returns Type Description String GetSerializedFloat(String) Declaration public float GetSerializedFloat(string key) Parameters Type Name Description String key Returns Type Description Single GetSerializedGameobjects(String) Declaration public GameObject GetSerializedGameobjects(string key) Parameters Type Name Description String key Returns Type Description GameObject GetSerializedInt(String) Declaration public int GetSerializedInt(string key) Parameters Type Name Description String key Returns Type Description Int32 GetSerializedString(String) Declaration public string GetSerializedString(string key) Parameters Type Name Description String key Returns Type Description String GetSerializedVector(String) Declaration public Vector3 GetSerializedVector(string key) Parameters Type Name Description String key Returns Type Description Vector3"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializationEntry-1.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializationEntry-1.html",
    "title": "Class SerializationEntry<T> | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializationEntry<T> Serialized data identified by a key. Inheritance Object SerializationEntry<T> Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializationEntry<T> Type Parameters Name Description T Constructors SerializationEntry(String, T) Declaration public SerializationEntry(string key, T value) Parameters Type Name Description String key T value Fields Key Declaration public string Key Field Value Type Description String Value Declaration public T Value Field Value Type Description T"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedFloats.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedFloats.html",
    "title": "Class SerializedFloats | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedFloats Inheritance Object SerializationData < Single > SerializedFloats Inherited Members SerializationData<Single>.data SerializationData<Single>.Get(String) SerializationData<Single>.Get(Int32) SerializationData<Single>.Add(String, Single) SerializationData<Single>.Clear() SerializationData<Single>.KeyExists(String) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializedFloats : SerializationData<float>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedGameobjects.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedGameobjects.html",
    "title": "Class SerializedGameobjects | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedGameobjects Inheritance Object SerializationData < GameObject > SerializedGameobjects Inherited Members SerializationData<GameObject>.data SerializationData<GameObject>.Get(String) SerializationData<GameObject>.Get(Int32) SerializationData<GameObject>.Add(String, GameObject) SerializationData<GameObject>.Clear() SerializationData<GameObject>.KeyExists(String) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializedGameobjects : SerializationData<GameObject>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedInts.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedInts.html",
    "title": "Class SerializedInts | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedInts Inheritance Object SerializationData < Int32 > SerializedInts Inherited Members SerializationData<Int32>.data SerializationData<Int32>.Get(String) SerializationData<Int32>.Get(Int32) SerializationData<Int32>.Add(String, Int32) SerializationData<Int32>.Clear() SerializationData<Int32>.KeyExists(String) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializedInts : SerializationData<int>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedStrings.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedStrings.html",
    "title": "Class SerializedStrings | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedStrings Inheritance Object SerializationData < String > SerializedStrings Inherited Members SerializationData<String>.data SerializationData<String>.Get(String) SerializationData<String>.Get(Int32) SerializationData<String>.Add(String, String) SerializationData<String>.Clear() SerializationData<String>.KeyExists(String) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializedStrings : SerializationData<string>"
  },
  "api/i5.VirtualAgents.AgentTasks.SerializedVectors.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.SerializedVectors.html",
    "title": "Class SerializedVectors | Documentation of the Virtual Agents Framework",
    "keywords": "Class SerializedVectors Inheritance Object SerializationData < Vector3 > SerializedVectors Inherited Members SerializationData<Vector3>.data SerializationData<Vector3>.Get(String) SerializationData<Vector3>.Get(Int32) SerializationData<Vector3>.Add(String, Vector3) SerializationData<Vector3>.Clear() SerializationData<Vector3>.KeyExists(String) Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class SerializedVectors : SerializationData<Vector3>"
  },
  "api/i5.VirtualAgents.AgentTasks.TaskSerializer.html": {
    "href": "api/i5.VirtualAgents.AgentTasks.TaskSerializer.html",
    "title": "Class TaskSerializer | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskSerializer Allows to serialize tasks that implement the ISerializable interface. Inheritance Object TaskSerializer Namespace : i5.VirtualAgents.AgentTasks Assembly : cs.temp.dll.dll Syntax public class TaskSerializer : ScriptableObject Fields Data Declaration public SerializationDataContainer Data Field Value Type Description SerializationDataContainer Methods GetCopyOfSerializedInterface(SerializationDataContainer) Creates a new object from the serialized interface and fills it with the serialized data. Declaration public ISerializable GetCopyOfSerializedInterface(SerializationDataContainer overwriteData = null) Parameters Type Name Description SerializationDataContainer overwriteData Returns Type Description ISerializable SetSerializedType(ISerializable) Declaration public void SetSerializedType(ISerializable serializedTask) Parameters Type Name Description ISerializable serializedTask"
  },
  "api/i5.VirtualAgents.AimAt.AimDirection.html": {
    "href": "api/i5.VirtualAgents.AimAt.AimDirection.html",
    "title": "Enum AimAt.AimDirection | Documentation of the Virtual Agents Framework",
    "keywords": "Enum AimAt.AimDirection Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public enum AimDirection Fields Name Description X Y Z"
  },
  "api/i5.VirtualAgents.AimAt.html": {
    "href": "api/i5.VirtualAgents.AimAt.html",
    "title": "Class AimAt | Documentation of the Virtual Agents Framework",
    "keywords": "Class AimAt Implements the functionality of aiming at a target Inheritance Object AimAt Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class AimAt : MonoBehaviour Properties LookSpeed Declaration public float LookSpeed { get; set; } Property Value Type Description Single ShouldDestroyItself true if the component should destroy itself, when the aiming stops and the aim is back at the starting position Declaration public bool ShouldDestroyItself { get; set; } Property Value Type Description Boolean Weight Declaration public float Weight { get; set; } Property Value Type Description Single Methods SetBonePreset(String) To set up the aiming at a specific body part, a preset of bones and weights and related settings can be selected Declaration public void SetBonePreset(string layer) Parameters Type Name Description String layer Which bonepreset should be selected based on the layer of the human body SetTargetTransform(Transform) Declaration public void SetTargetTransform(Transform targetTransform) Parameters Type Name Description Transform targetTransform SetupAndStart(String, Transform, Boolean) Starts the aiming at the target with the given layer and target Declaration public void SetupAndStart(string layer, Transform target, bool shouldDestroyItself = true) Parameters Type Name Description String layer The layer of the bodie that should be animated and aimed at the target. Supported are \"Right Arm\", \"Left Arm\", \"Head\", \"Right Leg\", \"Left Leg\" and \"Base Layer\" (spine) Transform target The transform of the object that should be aimed at Boolean shouldDestroyItself Start() Declaration protected virtual void Start() Stop() Removes the targetTransform, which results in the aim to return to the starting position, if shouldDestroyItself is set to true, the component will be destroyed after the aim is back at the starting position Declaration public void Stop() TemporarilyIncreaseLookSpeed(Single) Declaration public void TemporarilyIncreaseLookSpeed(float increase) Parameters Type Name Description Single increase UseNewBoneset(HumanBone[], AimAt.AimDirection, Transform, Single) Instead of using a bone preset, the bones can be selected and weighted manually Declaration public void UseNewBoneset(HumanBone[] humanBones, AimAt.AimDirection aimDirection, Transform aimTransform, float angleLimit) Parameters Type Name Description HumanBone [] humanBones The bones and weights that should be moved to accomplish the aiming AimAt.AimDirection aimDirection The direction going out of the aimTransform that should directly point at the target Transform aimTransform The last point of the bones that should directly point at the target Single angleLimit The limit at which pointing will be stopped, i.e. 90f to only aim when target is somewhere in front of the agent"
  },
  "api/i5.VirtualAgents.BaseTask.html": {
    "href": "api/i5.VirtualAgents.BaseTask.html",
    "title": "Class BaseTask | Documentation of the Virtual Agents Framework",
    "keywords": "Class BaseTask Inheritance Object BaseTask AgentBaseTask SelectorNode SequencerNode Implements ITask Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public abstract class BaseTask : ITask Properties State Declaration public TaskState State { get; set; } Property Value Type Description TaskState Methods EvaluateTaskState() Called by the executing agent on running tasks Performs frame-to-frame task execution updates This is e.g. useful for tracking movements towards a target and determinig when the agent has reached the target Declaration public virtual TaskState EvaluateTaskState() Returns Type Description TaskState StartExecution(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration public virtual void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent StopAsFailed() Can be used to fail the task outside of its Update method Declaration public void StopAsFailed() StopAsSucceeded() Can be used to let the task succseed outside of its Update method Declaration public void StopAsSucceeded() StopExecution() Called when the task succeedes or fails Declaration public virtual void StopExecution() Tick(Agent) Declaration public TaskState Tick(Agent excutingAgent) Parameters Type Name Description Agent excutingAgent Returns Type Description TaskState Implements ITask"
  },
  "api/i5.VirtualAgents.BehaviourTrees.BehaviorTreeRunner.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.BehaviorTreeRunner.html",
    "title": "Class BehaviorTreeRunner | Documentation of the Virtual Agents Framework",
    "keywords": "Class BehaviorTreeRunner Executes a given behaviour tree until the root node reports sucess or failure. Can either be provided with a Behaviour Tree Asset or can be given an AbstractTree manually constructed using the ITask interface. Inheritance Object TaskSystem BehaviorTreeRunner Implements ITaskSystem Namespace : i5.VirtualAgents.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class BehaviorTreeRunner : TaskSystem, ITaskSystem Fields AbstractTree Declaration public ITask AbstractTree Field Value Type Description ITask nodesOverwriteData Declaration public NodesOverwriteData nodesOverwriteData Field Value Type Description NodesOverwriteData Tree Declaration public BehaviorTreeAsset Tree Field Value Type Description BehaviorTreeAsset Methods UpdateTaskSystem() Declaration public override void UpdateTaskSystem() Overrides TaskSystem.UpdateTaskSystem() Implements ITaskSystem"
  },
  "api/i5.VirtualAgents.BehaviourTrees.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.html",
    "title": "Namespace i5.VirtualAgents.BehaviourTrees | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.BehaviourTrees Classes BehaviorTreeRunner Executes a given behaviour tree until the root node reports sucess or failure. Can either be provided with a Behaviour Tree Asset or can be given an AbstractTree manually constructed using the ITask interface. NodesOverwriteData SelectorNode Executes its child one after another, until one succsedes SequencerNode Executes all its children one after another, but aborts if one child fails Interfaces ICompositeNode Nodes that execute other nodes IDecoratorNode Nodes that change the execution behavior of attached nodes"
  },
  "api/i5.VirtualAgents.BehaviourTrees.ICompositeNode.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.ICompositeNode.html",
    "title": "Interface ICompositeNode | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ICompositeNode Nodes that execute other nodes Inherited Members ITask.State ITask.EvaluateTaskState() ITask.StartExecution(Agent) ITask.StopExecution() ITask.Tick(Agent) Namespace : i5.VirtualAgents.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public interface ICompositeNode : ITask Properties Children Declaration List<ITask> Children { get; set; } Property Value Type Description List < ITask >"
  },
  "api/i5.VirtualAgents.BehaviourTrees.IDecoratorNode.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.IDecoratorNode.html",
    "title": "Interface IDecoratorNode | Documentation of the Virtual Agents Framework",
    "keywords": "Interface IDecoratorNode Nodes that change the execution behavior of attached nodes Inherited Members ITask.State ITask.EvaluateTaskState() ITask.StartExecution(Agent) ITask.StopExecution() ITask.Tick(Agent) Namespace : i5.VirtualAgents.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public interface IDecoratorNode : ITask Properties Child Declaration ITask Child { get; set; } Property Value Type Description ITask"
  },
  "api/i5.VirtualAgents.BehaviourTrees.NodesOverwriteData.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.NodesOverwriteData.html",
    "title": "Class NodesOverwriteData | Documentation of the Virtual Agents Framework",
    "keywords": "Class NodesOverwriteData Inheritance Object NodesOverwriteData Namespace : i5.VirtualAgents.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class NodesOverwriteData : SerializationData<SerializationDataContainer>"
  },
  "api/i5.VirtualAgents.BehaviourTrees.SelectorNode.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.SelectorNode.html",
    "title": "Class SelectorNode | Documentation of the Virtual Agents Framework",
    "keywords": "Class SelectorNode Executes its child one after another, until one succsedes Inheritance Object BaseTask SelectorNode Implements ICompositeNode ITask Inherited Members BaseTask.State BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class SelectorNode : BaseTask, ICompositeNode, ITask Constructors SelectorNode() Declaration public SelectorNode() Properties Children Declaration public List<ITask> Children { get; set; } Property Value Type Description List < ITask > Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer EvaluateTaskState() Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState Overrides BaseTask.EvaluateTaskState() Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Declaration public override void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent Overrides BaseTask.StartExecution(Agent) Implements ICompositeNode ITask"
  },
  "api/i5.VirtualAgents.BehaviourTrees.SequencerNode.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.SequencerNode.html",
    "title": "Class SequencerNode | Documentation of the Virtual Agents Framework",
    "keywords": "Class SequencerNode Executes all its children one after another, but aborts if one child fails Inheritance Object BaseTask SequencerNode Implements ICompositeNode ITask Inherited Members BaseTask.State BaseTask.StopExecution() BaseTask.StopAsFailed() BaseTask.StopAsSucceeded() BaseTask.Tick(Agent) Namespace : i5.VirtualAgents.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class SequencerNode : BaseTask, ICompositeNode, ITask Constructors SequencerNode() Declaration public SequencerNode() Properties Children Declaration public List<ITask> Children { get; set; } Property Value Type Description List < ITask > Methods Deserialize(SerializationDataContainer) Declaration public void Deserialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer EvaluateTaskState() Declaration public override TaskState EvaluateTaskState() Returns Type Description TaskState Overrides BaseTask.EvaluateTaskState() Serialize(SerializationDataContainer) Declaration public void Serialize(SerializationDataContainer serializer) Parameters Type Name Description SerializationDataContainer serializer StartExecution(Agent) Declaration public override void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent Overrides BaseTask.StartExecution(Agent) Implements ICompositeNode ITask"
  },
  "api/i5.VirtualAgents.BehaviourTrees.Visual.BehaviorTreeAsset.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.Visual.BehaviorTreeAsset.html",
    "title": "Class BehaviorTreeAsset | Documentation of the Virtual Agents Framework",
    "keywords": "Class BehaviorTreeAsset Asset that can be used to create behaviour trees that are saved persistently. The tree is not executable, but an executable abstract copy can be retrived. Inheritance Object BehaviorTreeAsset Namespace : i5.VirtualAgents.BehaviourTrees.Visual Assembly : cs.temp.dll.dll Syntax public class BehaviorTreeAsset : ScriptableObject Fields Nodes Declaration public List<VisualNode> Nodes Field Value Type Description List < VisualNode > Properties RootNode Declaration public VisualNode RootNode { get; } Property Value Type Description VisualNode Methods AddNode(ISerializable) Adds a new node based on an serializable task Declaration public VisualNode AddNode(ISerializable baseTask) Parameters Type Name Description ISerializable baseTask Returns Type Description VisualNode DeleteNode(VisualNode) Deletes the given node from the tree Declaration public void DeleteNode(VisualNode nodeToDelete) Parameters Type Name Description VisualNode nodeToDelete GetExecutableTree(NodesOverwriteData) Generates an abstract copy of the tree that is executable through the root nodes FullUpdate() function Declaration public ITask GetExecutableTree(NodesOverwriteData nodesOverwriteData = null) Parameters Type Name Description NodesOverwriteData nodesOverwriteData Returns Type Description ITask"
  },
  "api/i5.VirtualAgents.BehaviourTrees.Visual.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.Visual.html",
    "title": "Namespace i5.VirtualAgents.BehaviourTrees.Visual | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.BehaviourTrees.Visual Classes BehaviorTreeAsset Asset that can be used to create behaviour trees that are saved persistently. The tree is not executable, but an executable abstract copy can be retrived. VisualNode Allows a node to be used in the visual behavior tree editor."
  },
  "api/i5.VirtualAgents.BehaviourTrees.Visual.VisualNode.html": {
    "href": "api/i5.VirtualAgents.BehaviourTrees.Visual.VisualNode.html",
    "title": "Class VisualNode | Documentation of the Virtual Agents Framework",
    "keywords": "Class VisualNode Allows a node to be used in the visual behavior tree editor. Inheritance Object VisualNode Namespace : i5.VirtualAgents.BehaviourTrees.Visual Assembly : cs.temp.dll.dll Syntax public class VisualNode : TaskSerializer Fields Children Declaration public List<VisualNode> Children Field Value Type Description List < VisualNode > Description Declaration public string Description Field Value Type Description String Guid Declaration public string Guid Field Value Type Description String Position Declaration public Vector2 Position Field Value Type Description Vector2"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTreeRunnerInspector.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTreeRunnerInspector.html",
    "title": "Class BehaviourTreeRunnerInspector | Documentation of the Virtual Agents Framework",
    "keywords": "Class BehaviourTreeRunnerInspector Inheritance Object BehaviourTreeRunnerInspector Namespace : i5.VirtualAgents.Editor Assembly : cs.temp.dll.dll Syntax public class BehaviourTreeRunnerInspector : UnityEditor.Editor Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.BehaviourTreeEditor.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.BehaviourTreeEditor.html",
    "title": "Class BehaviourTreeEditor | Documentation of the Virtual Agents Framework",
    "keywords": "Class BehaviourTreeEditor Provides a visual behaviour tree editor. Inheritance Object BehaviourTreeEditor Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class BehaviourTreeEditor : EditorWindow Methods CreateGUI() Declaration public void CreateGUI() ShowWindow() Declaration public static void ShowWindow()"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.BehaviourTreeView.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.BehaviourTreeView.html",
    "title": "Class BehaviourTreeView | Documentation of the Virtual Agents Framework",
    "keywords": "Class BehaviourTreeView Displays a behaviour tree in the behaviour tree editor and provides the means to manipulate it. Inheritance Object BehaviourTreeView Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class BehaviourTreeView : GraphView Constructors BehaviourTreeView() Declaration public BehaviourTreeView() Fields OnNodeSelect Declaration public Action<NodeView> OnNodeSelect Field Value Type Description Action < NodeView > Tree Declaration public BehaviorTreeAsset Tree Field Value Type Description BehaviorTreeAsset Methods BuildContextualMenu(ContextualMenuPopulateEvent) Builds a context menu with options for creating nodes. Every non abstract class that (1) implements IAgentTask, ICompositeNode or IDecoratorNode, (2) additionally implements ISerialiazble and (3) has an empty constructor will automatically get its own context menu entry and can be fully used as node in the behaviour tree. Declaration public override void BuildContextualMenu(ContextualMenuPopulateEvent evt) Parameters Type Name Description ContextualMenuPopulateEvent evt GetCompatiblePorts(Port, NodeAdapter) Get all ports compatible with given port. In theory this exact function is already provided by the GraphView class, but it contains an implementation error. Declaration public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter) Parameters Type Name Description Port startPort NodeAdapter nodeAdapter Returns Type Description List < Port > PopulateView(BehaviorTreeAsset) Creates node views for all nodes in the tree and draws the necessary edges. Declaration public void PopulateView(BehaviorTreeAsset tree) Parameters Type Name Description BehaviorTreeAsset tree SetupManipulators(Boolean) Adds the ability to zoom in on the graph, to drag and drop nodes around, to drag and drop an entire selection and to select nodes using a rectangle selction Declaration public void SetupManipulators(bool readOnly = false) Parameters Type Name Description Boolean readOnly"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.BehaviourTreeView.UxmlFactory.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.BehaviourTreeView.UxmlFactory.html",
    "title": "Class BehaviourTreeView.UxmlFactory | Documentation of the Virtual Agents Framework",
    "keywords": "Class BehaviourTreeView.UxmlFactory Inheritance Object BehaviourTreeView.UxmlFactory Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : BehaviourTreeView.UxmlFactory<BehaviourTreeView, UxmlTraits>"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.html",
    "title": "Namespace i5.VirtualAgents.Editor.BehaviourTrees | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.Editor.BehaviourTrees Classes BehaviourTreeEditor Provides a visual behaviour tree editor. BehaviourTreeView Displays a behaviour tree in the behaviour tree editor and provides the means to manipulate it. BehaviourTreeView.UxmlFactory InspectorView Provides an inspector view for a node view InspectorView.UxmlFactory NodeView Displays a Behaviour Tree node in the visual editor VisualNodeInspector Exposes the data that was serialized via the ISerializable interface in the original serialization order"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.InspectorView.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.InspectorView.html",
    "title": "Class InspectorView | Documentation of the Virtual Agents Framework",
    "keywords": "Class InspectorView Provides an inspector view for a node view Inheritance Object InspectorView Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class InspectorView : VisualElement"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.InspectorView.UxmlFactory.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.InspectorView.UxmlFactory.html",
    "title": "Class InspectorView.UxmlFactory | Documentation of the Virtual Agents Framework",
    "keywords": "Class InspectorView.UxmlFactory Inheritance Object InspectorView.UxmlFactory Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : InspectorView.UxmlFactory<InspectorView, VisualElement.UxmlTraits>"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.NodeView.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.NodeView.html",
    "title": "Class NodeView | Documentation of the Virtual Agents Framework",
    "keywords": "Class NodeView Displays a Behaviour Tree node in the visual editor Inheritance Object NodeView Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class NodeView : Node Constructors NodeView(VisualNode) Declaration public NodeView(VisualNode node) Parameters Type Name Description VisualNode node Fields input Declaration public Port input Field Value Type Description Port node Declaration public VisualNode node Field Value Type Description VisualNode OnNodeSelect Declaration public Action<NodeView> OnNodeSelect Field Value Type Description Action < NodeView > output Declaration public Port output Field Value Type Description Port Methods OnSelected() Delegate the OnSelect event to display this node in the node inspector Declaration public override void OnSelected() SetPosition(Rect) Set node position Declaration public override void SetPosition(Rect newPos) Parameters Type Name Description Rect newPos"
  },
  "api/i5.VirtualAgents.Editor.BehaviourTrees.VisualNodeInspector.html": {
    "href": "api/i5.VirtualAgents.Editor.BehaviourTrees.VisualNodeInspector.html",
    "title": "Class VisualNodeInspector | Documentation of the Virtual Agents Framework",
    "keywords": "Class VisualNodeInspector Exposes the data that was serialized via the ISerializable interface in the original serialization order Inheritance Object VisualNodeInspector Namespace : i5.VirtualAgents.Editor.BehaviourTrees Assembly : cs.temp.dll.dll Syntax public class VisualNodeInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/i5.VirtualAgents.Editor.html": {
    "href": "api/i5.VirtualAgents.Editor.html",
    "title": "Namespace i5.VirtualAgents.Editor | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.Editor Classes BehaviourTreeRunnerInspector SplitView Exposes the two TwoPaneSplitView to the UI builder by implementing the necessary UxmlFactory. SplitView.UxmlFactory"
  },
  "api/i5.VirtualAgents.Editor.SplitView.html": {
    "href": "api/i5.VirtualAgents.Editor.SplitView.html",
    "title": "Class SplitView | Documentation of the Virtual Agents Framework",
    "keywords": "Class SplitView Exposes the two TwoPaneSplitView to the UI builder by implementing the necessary UxmlFactory. Inheritance Object SplitView Namespace : i5.VirtualAgents.Editor Assembly : cs.temp.dll.dll Syntax public class SplitView : TwoPaneSplitView"
  },
  "api/i5.VirtualAgents.Editor.SplitView.UxmlFactory.html": {
    "href": "api/i5.VirtualAgents.Editor.SplitView.UxmlFactory.html",
    "title": "Class SplitView.UxmlFactory | Documentation of the Virtual Agents Framework",
    "keywords": "Class SplitView.UxmlFactory Inheritance Object SplitView.UxmlFactory Namespace : i5.VirtualAgents.Editor Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : SplitView.UxmlFactory<SplitView, TwoPaneSplitView.UxmlTraits>"
  },
  "api/i5.VirtualAgents.html": {
    "href": "api/i5.VirtualAgents.html",
    "title": "Namespace i5.VirtualAgents | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents Classes AdaptiveGaze Defines a gaze behaviour that looks at gaze targets in the scene dynamiycally AdaptiveGazeTarget Agent Agent's functionality mainly includes managing their task queue, responding to task execution statuses and changing one's state accordingly AgentAnimationUpdater Component for synchronizing the agent's movement with the shown animation AimAt Implements the functionality of aiming at a target BaseTask HumanBone Item Represents an item which can be picked up by an agent MeshSocket Socket on the agent to which items can be attached, e.g., for hands or item belts on the agent MeshSockets Collects and advertises the available mesh sockets to other scripts TaskSystem Interfaces ITask Task that can be executed by ITaskSystems. Needs to be updated with FullUpdate() in order to perform work. ITaskSystem Provides means for updating a task system and scheduling new tasks. Enums AimAt.AimDirection MeshSockets.SocketId TaskState"
  },
  "api/i5.VirtualAgents.HumanBone.html": {
    "href": "api/i5.VirtualAgents.HumanBone.html",
    "title": "Class HumanBone | Documentation of the Virtual Agents Framework",
    "keywords": "Class HumanBone Inheritance Object HumanBone Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax [Serializable] public class HumanBone Fields bone Declaration public HumanBodyBones bone Field Value Type Description HumanBodyBones weight Declaration public float weight Field Value Type Description Single"
  },
  "api/i5.VirtualAgents.ITask.html": {
    "href": "api/i5.VirtualAgents.ITask.html",
    "title": "Interface ITask | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ITask Task that can be executed by ITaskSystems. Needs to be updated with FullUpdate() in order to perform work. Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public interface ITask Properties State The current state of the task Declaration TaskState State { get; set; } Property Value Type Description TaskState Methods EvaluateTaskState() Evaluates the task's current state Declaration TaskState EvaluateTaskState() Returns Type Description TaskState StartExecution(Agent) Gets the reference to the agent which will execute this task Starts the task's execution Declaration void StartExecution(Agent executingAgent) Parameters Type Name Description Agent executingAgent StopExecution() Called when the task succeedes or fails Declaration void StopExecution() Tick(Agent) Updates the State and automatically invokes StartExecution() on first update and StopExeuction() when task succeeds/fails. Declaration TaskState Tick(Agent excutingAgent) Parameters Type Name Description Agent excutingAgent Returns Type Description TaskState"
  },
  "api/i5.VirtualAgents.ITaskSystem.html": {
    "href": "api/i5.VirtualAgents.ITaskSystem.html",
    "title": "Interface ITaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Interface ITaskSystem Provides means for updating a task system and scheduling new tasks. Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public interface ITaskSystem Methods UpdateTaskSystem() Declaration void UpdateTaskSystem()"
  },
  "api/i5.VirtualAgents.Item.html": {
    "href": "api/i5.VirtualAgents.Item.html",
    "title": "Class Item | Documentation of the Virtual Agents Framework",
    "keywords": "Class Item Represents an item which can be picked up by an agent Inheritance Object Item Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class Item : MonoBehaviour Fields dropEvent This event can be listend to, to get notified when the item is dropped Declaration public UnityEvent dropEvent Field Value Type Description UnityEvent Properties CanBePickedUp Declaration public bool CanBePickedUp { get; set; } Property Value Type Description Boolean GrabTarget grab is where IK of the Hand will be applied to, for example a handle of a cup. Initially it is the same as the object itself. Declaration public Transform GrabTarget { get; } Property Value Type Description Transform IsPickedUp Declaration public bool IsPickedUp { get; set; } Property Value Type Description Boolean Methods IsDropped() Declaration public void IsDropped()"
  },
  "api/i5.VirtualAgents.MeshSocket.html": {
    "href": "api/i5.VirtualAgents.MeshSocket.html",
    "title": "Class MeshSocket | Documentation of the Virtual Agents Framework",
    "keywords": "Class MeshSocket Socket on the agent to which items can be attached, e.g., for hands or item belts on the agent Inheritance Object MeshSocket Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class MeshSocket : MonoBehaviour Properties SocketId Declaration public MeshSockets.SocketId SocketId { get; } Property Value Type Description MeshSockets.SocketId Methods Attach(Item) Attaches an item to the mesh socket based on the definition which is encoded in hte item Declaration public void Attach(Item item) Parameters Type Name Description Item item The item to attach to the socket Detach(Item) Detaches the given item from the socket Declaration public void Detach(Item item) Parameters Type Name Description Item item Detaches the item from the socket"
  },
  "api/i5.VirtualAgents.MeshSockets.html": {
    "href": "api/i5.VirtualAgents.MeshSockets.html",
    "title": "Class MeshSockets | Documentation of the Virtual Agents Framework",
    "keywords": "Class MeshSockets Collects and advertises the available mesh sockets to other scripts Inheritance Object MeshSockets Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public class MeshSockets : MonoBehaviour Properties TwoBoneIKConstraintLeftArm Declaration public TwoBoneIKConstraint TwoBoneIKConstraintLeftArm { get; } Property Value Type Description TwoBoneIKConstraint TwoBoneIKConstraintRightArm Define the two bone IK constraints for the arms that is uses in the AgetPickUpTask Declaration public TwoBoneIKConstraint TwoBoneIKConstraintRightArm { get; } Property Value Type Description TwoBoneIKConstraint Methods Attach(Item, MeshSockets.SocketId) Attaches an item to the socket with the given ID Declaration public void Attach(Item item, MeshSockets.SocketId socketId) Parameters Type Name Description Item item The item to attach MeshSockets.SocketId socketId The ID by which the socket can be found Detach(Item) Detaches an item from its socket Declaration public void Detach(Item item) Parameters Type Name Description Item item The item to detach"
  },
  "api/i5.VirtualAgents.MeshSockets.SocketId.html": {
    "href": "api/i5.VirtualAgents.MeshSockets.SocketId.html",
    "title": "Enum MeshSockets.SocketId | Documentation of the Virtual Agents Framework",
    "keywords": "Enum MeshSockets.SocketId Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public enum SocketId Fields Name Description LeftHand RightHand Spine"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.html",
    "title": "Class AgentTaskManager | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskManager Inheritance Object AgentTaskManager Namespace : i5.VirtualAgents.ScheduleBasedExecution Assembly : cs.temp.dll.dll Syntax public class AgentTaskManager Constructors AgentTaskManager() Creates a new task manager but does not yet associate an agent with it If you use this method, you need to call the AssociateAgent method at some point before scheduled tasks can be executed Declaration public AgentTaskManager() AgentTaskManager(Agent) Creates a new task manager and associates with an agent Declaration public AgentTaskManager(Agent agent) Parameters Type Name Description Agent agent The agent on which scheduled tasks should be executed Properties CurrentState Agent's current state Declaration public TaskManagerState CurrentState { get; } Property Value Type Description TaskManagerState CurrentTask Agent's current task Declaration public IAgentTask CurrentTask { get; } Property Value Type Description IAgentTask ExecutingAgent Agent which will execute the scheduled tasks Declaration public Agent ExecutingAgent { get; } Property Value Type Description Agent IsActive Checks whether the task manager is active or has been deactivated Only returns false if the task manager has explicitly been deactivated Declaration public bool IsActive { get; set; } Property Value Type Description Boolean Methods AssociateAgent(Agent) Associates an agent with the task manager Scheduled tasks can only run if an agent was registered with the task manager, either using this method or the constructor which takes an agent as an argument Declaration public void AssociateAgent(Agent agent) Parameters Type Name Description Agent agent The agent which should execute the scheduled tasks PeekNextTask() Peeks at the next task that the task manager will execute after the current one Declaration public IAgentTask PeekNextTask() Returns Type Description IAgentTask Returns the next task to execute, null if no task is upcoming ScheduleTask(IAgentTask, Int32) Schedules a task in the queue, sorted by the given priority Declaration public void ScheduleTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task The task that should be scheduled for execution Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Update() Enable the right mode depending on the agent's status Declaration public void Update() Events OnStateChanged Event which is raised once the agent's state changes Declaration public event Action OnStateChanged Event Type Type Description Action OnTaskFinished Event which is raised once the agent has finished the current task Declaration public event AgentTaskManager.TaskFinishedEvent OnTaskFinished Event Type Type Description AgentTaskManager.TaskFinishedEvent"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.TaskFinishedEvent.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskManager.TaskFinishedEvent.html",
    "title": "Delegate AgentTaskManager.TaskFinishedEvent | Documentation of the Virtual Agents Framework",
    "keywords": "Delegate AgentTaskManager.TaskFinishedEvent Event handler for finished tasks Namespace : i5.VirtualAgents.ScheduleBasedExecution Assembly : cs.temp.dll.dll Syntax public delegate void TaskFinishedEvent(AgentTaskManager sender, IAgentTask finishedTask); Parameters Type Name Description AgentTaskManager sender The task manager on which the task finished IAgentTask finishedTask The task that finished"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskQueue.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.AgentTaskQueue.html",
    "title": "Class AgentTaskQueue | Documentation of the Virtual Agents Framework",
    "keywords": "Class AgentTaskQueue Holds an IAgentTask queue Inheritance Object AgentTaskQueue Namespace : i5.VirtualAgents.ScheduleBasedExecution Assembly : cs.temp.dll.dll Syntax public class AgentTaskQueue Constructors AgentTaskQueue() Create an empty IAgentTask queue Declaration public AgentTaskQueue() Methods AddTask(IAgentTask, Int32) Add a new task to the queue according to the FIFO principle but with priority categories Declaration public void AddTask(IAgentTask task, int priority = 0) Parameters Type Name Description IAgentTask task Any task that implements the IAgentTask interface Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. PeekNextTask() Peeks the next task in the queue Declaration public IAgentTask PeekNextTask() Returns Type Description IAgentTask Returns the next upcoming task in the queue, null if no more tasks are queued RequestNextTask() Request the next task from the queue Declaration public IAgentTask RequestNextTask() Returns Type Description IAgentTask Next task from the queue or null if the queue is empty"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.html",
    "title": "Namespace i5.VirtualAgents.ScheduleBasedExecution | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.ScheduleBasedExecution Classes AgentTaskManager AgentTaskQueue Holds an IAgentTask queue ScheduleBasedTaskSystem Executes tasks by scheduling them in a priority queue TaskActions List of shortcuts to schedule actions on an agent Enums TaskManagerState The different states that the agent's task manager can be in Delegates AgentTaskManager.TaskFinishedEvent Event handler for finished tasks"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.ScheduleBasedTaskSystem.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.ScheduleBasedTaskSystem.html",
    "title": "Class ScheduleBasedTaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Class ScheduleBasedTaskSystem Executes tasks by scheduling them in a priority queue Inheritance Object TaskSystem ScheduleBasedTaskSystem Implements ITaskSystem Namespace : i5.VirtualAgents.ScheduleBasedExecution Assembly : cs.temp.dll.dll Syntax public class ScheduleBasedTaskSystem : TaskSystem, ITaskSystem Properties Tasks List of shortcut methods to add common tasks to the agent's task queue Syntactic sugar. It is also possible to directly enqueue task objects on the agent instead, e.g. for custom tasks Declaration public TaskActions Tasks { get; } Property Value Type Description TaskActions Methods ScheduleTask(IAgentTask, Int32, String) Schedule a task Declaration public void ScheduleTask(IAgentTask task, int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description IAgentTask task Task to be scheduled Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value String layer UpdateTaskSystem() Declaration public override void UpdateTaskSystem() Overrides TaskSystem.UpdateTaskSystem() Implements ITaskSystem"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.TaskActions.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.TaskActions.html",
    "title": "Class TaskActions | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskActions List of shortcuts to schedule actions on an agent Inheritance Object TaskActions Namespace : i5.VirtualAgents.ScheduleBasedExecution Assembly : cs.temp.dll.dll Syntax public class TaskActions Constructors TaskActions(ScheduleBasedTaskSystem) Creates a new task actions shortcut and registers the schedule system on which the tasks are scheduled Declaration public TaskActions(ScheduleBasedTaskSystem scheduleTaskSystem) Parameters Type Name Description ScheduleBasedTaskSystem scheduleTaskSystem The agent on which the tasks are scheduled and executed Methods DropItem(GameObject, Int32) Drop one specified or all object that are currently attached to the agent and have the Item component Shortcut queue management function Declaration public AgentBaseTask DropItem(GameObject dropObject = null, int priority = 0) Parameters Type Name Description GameObject dropObject The item that should be dropped, no item will result in all items being dropped Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoTo(GameObject, Vector3, Int32, Boolean) Creates an AgentMovementTask for walking/running to a specific gameobject and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(GameObject destinationObject, Vector3 offset = null, int priority = 0, bool follow = false) Parameters Type Name Description GameObject destinationObject GameObject the agent should go to Vector3 offset Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Boolean follow Decides if the Agent should follow the GameObject, dynamically, even if the path cannot reach the GameObject Returns Type Description AgentBaseTask GoTo(Transform, Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(Transform destinationTransform, Vector3 offset = null, int priority = 0) Parameters Type Name Description Transform destinationTransform Vector3 offset Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoTo(Vector3, Int32) Creates an AgentMovementTask for walking/running and schedules it or forces its execution. Shortcut queue management function Declaration public AgentBaseTask GoTo(Vector3 destinationCoordinates, int priority = 0) Parameters Type Name Description Vector3 destinationCoordinates Position the agent should go to Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoToAndDropItem(Transform, GameObject, Int32) Go to a transform and drop one specified or all object that are currently attached to the agent and have the Item component Shortcut queue management function Declaration public AgentBaseTask GoToAndDropItem(Transform destinationTransform, GameObject dropObject = null, int priority = 0) Parameters Type Name Description Transform destinationTransform Transform the agent should go to GameObject dropObject The item that should be dropped, no item will result in all items being dropped Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoToAndDropItem(Vector3, GameObject, Int32) Go to coordinates and drop one specified or all object that are currently attached to the agent and have the Item component Shortcut queue management function Declaration public AgentBaseTask GoToAndDropItem(Vector3 destinationCoordinates, GameObject dropObject = null, int priority = 0) Parameters Type Name Description Vector3 destinationCoordinates Position the agent should go to GameObject dropObject The item that should be dropped, no item will result in all items being dropped Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. Returns Type Description AgentBaseTask GoToAndPickUp(GameObject, Int32, SocketId, Single) Go to an object with the Item component and pick it up when near enough. Might fail, when object is moving too fast. Shortcut queue management function Declaration public AgentBaseTask GoToAndPickUp(GameObject destinationObject, int priority = 0, SocketId bodyAttachPoint = null, float minDistance = 0.3F) Parameters Type Name Description GameObject destinationObject Object the agent should go to and pick up. Needs to have an item component and be reachable by the agent. Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. SocketId bodyAttachPoint Bodypart that the object should be attached to, standard is the right Hand Single minDistance Distance at which the the agent will try to pick up the object Returns Type Description AgentBaseTask PickUp(GameObject, Int32, SocketId) Pick up an object with the Item component that is currently in reach of the agent Shortcut queue management function Declaration public AgentBaseTask PickUp(GameObject pickupObject, int priority = 0, SocketId bodyAttachPoint = null) Parameters Type Name Description GameObject pickupObject Object that should be picked up. Needs to have an item component and be near to the agent. Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. SocketId bodyAttachPoint Bodypart that the object should be attached to, standard is the right Hand Returns Type Description AgentBaseTask PlayAnimation(String, Single, String, Int32, String, GameObject) Play an animation through the agents animation controller Shortcut queue management function Declaration public AgentBaseTask PlayAnimation(string startTrigger, float playTime, string stopTrigger = \"\", int priority = 0, string layer = \"Base Layer\", GameObject aimTarget = null) Parameters Type Name Description String startTrigger Trigger that starts the animation Single playTime Time in seconds after which the animation should stop String stopTrigger Trigger that stops the animation. If not provided, start trigger is used again Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. String layer The animation layer on which the task should be excuted GameObject aimTarget The target at which the agent should aim while playing the animation Returns Type Description AgentBaseTask WaitForSeconds(Single, Int32, String) Lets the agent wait for the given number of seconds in an idle position Shortcut queue management function Declaration public AgentBaseTask WaitForSeconds(float seconds, int priority = 0, string layer = \"Base Layer\") Parameters Type Name Description Single seconds The time span in seconds for which the agent shoudl wait Int32 priority Priority of the task. Tasks with high importance should get a positive value, less important tasks a negative value. Default tasks have a priority of 0. String layer The animation layer on which the task should be excuted Returns Type Description AgentBaseTask"
  },
  "api/i5.VirtualAgents.ScheduleBasedExecution.TaskManagerState.html": {
    "href": "api/i5.VirtualAgents.ScheduleBasedExecution.TaskManagerState.html",
    "title": "Enum TaskManagerState | Documentation of the Virtual Agents Framework",
    "keywords": "Enum TaskManagerState The different states that the agent's task manager can be in Namespace : i5.VirtualAgents.ScheduleBasedExecution Assembly : cs.temp.dll.dll Syntax public enum TaskManagerState Fields Name Description busy The agent is busy and is currently executing a task idle An idle state where nothing is to do and new tasks can be started inactive The task manager is inactive, e.g. if no agent is associated with it yet or if it has been deactived deliberately In an inactive state, no tasks are executed or started waiting The agent waits for a condition to become true so that the next task can be started"
  },
  "api/i5.VirtualAgents.TaskState.html": {
    "href": "api/i5.VirtualAgents.TaskState.html",
    "title": "Enum TaskState | Documentation of the Virtual Agents Framework",
    "keywords": "Enum TaskState Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public enum TaskState Fields Name Description Failure Running Success Waiting"
  },
  "api/i5.VirtualAgents.TaskSystem.html": {
    "href": "api/i5.VirtualAgents.TaskSystem.html",
    "title": "Class TaskSystem | Documentation of the Virtual Agents Framework",
    "keywords": "Class TaskSystem Inheritance Object TaskSystem BehaviorTreeRunner ScheduleBasedTaskSystem Implements ITaskSystem Namespace : i5.VirtualAgents Assembly : cs.temp.dll.dll Syntax public abstract class TaskSystem : MonoBehaviour, ITaskSystem Methods UpdateTaskSystem() Declaration public abstract void UpdateTaskSystem() Implements ITaskSystem"
  },
  "api/i5.VirtualAgents.Utilities.DebugDrawTransformAxes.html": {
    "href": "api/i5.VirtualAgents.Utilities.DebugDrawTransformAxes.html",
    "title": "Class DebugDrawTransformAxes | Documentation of the Virtual Agents Framework",
    "keywords": "Class DebugDrawTransformAxes Inheritance Object DebugDrawTransformAxes Namespace : i5.VirtualAgents.Utilities Assembly : cs.temp.dll.dll Syntax public class DebugDrawTransformAxes : MonoBehaviour"
  },
  "api/i5.VirtualAgents.Utilities.DebugDrawTransformSphere.html": {
    "href": "api/i5.VirtualAgents.Utilities.DebugDrawTransformSphere.html",
    "title": "Class DebugDrawTransformSphere | Documentation of the Virtual Agents Framework",
    "keywords": "Class DebugDrawTransformSphere Inheritance Object DebugDrawTransformSphere Namespace : i5.VirtualAgents.Utilities Assembly : cs.temp.dll.dll Syntax public class DebugDrawTransformSphere : MonoBehaviour Fields color Declaration public Color color Field Value Type Description Color radius Declaration public float radius Field Value Type Description Single"
  },
  "api/i5.VirtualAgents.Utilities.html": {
    "href": "api/i5.VirtualAgents.Utilities.html",
    "title": "Namespace i5.VirtualAgents.Utilities | Documentation of the Virtual Agents Framework",
    "keywords": "Namespace i5.VirtualAgents.Utilities Classes DebugDrawTransformAxes DebugDrawTransformSphere"
  },
  "index.html": {
    "href": "index.html",
    "title": "Virtual Agents Framework | Documentation of the Virtual Agents Framework",
    "keywords": "Virtual Agents Framework A Unity package for creating virtual agents. This framework provides the architecture, assets and samples for creating own virtual agents, also called non-player characters (NPCs), in Unity. Setup Minimum Unity version: 2020.3. There are different ways to add the package to a project. Alternative 1: OpenUPM using the Package Manager UI The first option to install the package is to include it via Unity's package manager. Here, we first need to add a scoped registry which tells Unity that the package is hosted on OpenUPM . After that, we can add the package in Unity's package manager window. In Unity, go to Window > Package Manager to open the package manager UI. In the right corner of the opened windows, click on the small cogwheel and select \"Advanced Project Settings\". Add a new scoped registry with the following values: Field Value(s) Name: package.openupm.com URL: https://package.openupm.com Scope(s): com.i5.toolkit.core com.i5.virtualagents Next, click the Save/Apply button. Close the settings window and return to the package manager window. Click the small plus button at the left top of the window. Select \"\"Add package by name...\" or \"Add package from git URL...\" depending on your Unity version. Enter com.i5.virtualagents in the text field. If the package manager asks for a version number, enter the latest one, so 1.2.0 . Click the add button and wait for the download to finish. As an alternative to steps 7 - 8, the package should also be available in the list if you switch the dropdown next to the plus button from \"Packages: Unity Registry\" to \"Packages: My Registries\". You can then select the entry and click the \"Install\" button. Alternative 2: OpenUPM with manifest.json file A second option is to directly edit the manifest.json file of your project. In alternative 1, Unity performs this in the background, but you can also just copy-paste the necessary scoped registry definitions and add the package directly in the manifest.json file. Open a file explorer and navigation into your project's root folder (the folder which contains sub-directories like \"Assets\" or \"Library\"). Then, navigate into the \"Packages\" folder and open the \"manifest.json\" file. Integrate the following json string into the manifest.json file: { \"scopedRegistries\": [ { \"name\": \"package.openupm.com\", \"url\": \"https://package.openupm.com\", \"scopes\": [ \"com.i5.toolkit.core\", \"com.i5.virtualagents\" ] } ], \"dependencies\": { \"com.i5.virtualagents\": \"1.2.0\" } } If your manifest.json file already contains a scopedRegistries array, make sure to add the entry to the existing one. If your scopedRegistries array already contains an entry with the name \"package.openupm.com\", just add the given scopes to that list. In that case, there is no need to create a second \"package.openupm.com\" entry. The entry \"com.i5.virtualagents\": \"1.2.0\" can be inserted anywhere in the dependencies object with the other installed packages that are already listed there. Alternative 3: Git Package You can also directly include the package as a Git repository. First, you need to install the i5 Toolkit for Unity by following one of its installation instructions in the readme file . This step needs to happen first - otherwise there is an error message as Unity cannot resolve the dependency. In Unity, go to \"Window > Package Manager\" to open the package manager window. Click the plus button in the top left corner and select \"Add package from git URL...\". Enter https://github.com/rwth-acis/Virtual-Agents-Framework.git#[version] into the text field where [version] is replaced with \"v\", followed by the release number, e.g. \"v1.2.0\" or upm for the latest version. Confirm the download by clicking on the \"add\" button. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated and you will not be notified about updates automatically. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Documentation Check out the documentation pages and select the version that you are using. You can also find practical examples of features in the package's samples. To access them, follow these steps: In Unity, go to \"Window > Package Manager\". Make sure that the dropdown menu in the top left of the package manager window is set to \"Packages: In Project\". Click on the entry for the Virtual Agents Framework in the list. On the right side, expand the samples section. Here, you can find a list of available examples. Click the import button to download the samples. They are saved in your Assets folder in a folder \"Samples/Virtual Agents Framework/1.2.0\". Usually, each sample contains a sample scene as the starting point. Within the scene, there is a documentation object, indicated by an information icon. If you click on it, there are further descriptions about the scene in the inspector. Licensing The package's code is distributed under the MIT license . All art assets (e.g. files located in the folders \"3D Models\" and \"Animations\" in the package's root folder) are distributed under the Creative Commons Attribution 4.0 International license and are attributed to Benedikt Hensen unless stated otherwise. Contributors Code & Documentation: Benedikt Hensen Danylo Bekhter Sebastian Meinberger David Terhürne 3D Models & Animations: Benedikt Hensen David Terhürne Related Projects This framework uses the i5 Toolkit for Unity which provides building blocks and modules for general development with the Unity 3D engine. If you want to use the virtual agents in mixed reality, check out our i5 Toolkit for Mixed Reality . It is an extension package that builds upon the functionality of the i5 Toolkit for Unity and is optimized for mixed reality."
  },
  "manual/adaptive-gaze.html": {
    "href": "manual/adaptive-gaze.html",
    "title": "Adaptive Gaze | Documentation of the Virtual Agents Framework",
    "keywords": "Adaptive Gaze To make an agent look more life like it can automatically look at objects in front of him, swerve between the objects, idle in between and pick up on sudden interest changes, like objects that start to move. To get this functionally the AdaptiveGaze component needs to be added to the agent. The automatic gaze is automatically overwritten if a AgentAnimationTask is played on the head layer of the agent and will be reactivated when the animation ends. Algorithm The agent checks if there are any AdaptiveGazeTarget s in front of him and then checks if they are seeable. For calculating the value of interest to the agent, the distance to the target, the importance defined by the target, the time that the agent already looks at the target and the perceived novelty is used. timeLookedAt is modified in two ways: timeLookedAt increases every time that the item is looked at. timeLookedAt decreases every time that the item is not looked at. novelty is modified in two ways: novelty increases by 5 if the item has not been looked at before. novelty increases by 10 if the importance of the item increased since last seeing it. novelty decreases by 1 every time that the item is looked at. Setup Requirements The agent needs the AdaptiveGaze component. Targets that can be looked at need to be on specific layers, specified in seeLayers . Objects that should obstruct the view of the agent need to be on specific layers, specified in occlusonLayers . Objects that should be looked at need the AdaptiveGazeTarget component. AdaptiveGazeTarget needs to be on one of the seeLayers that was specified in the agent. The layer can be changed in the top right corner of the inspector. (optional) A collider that makes sense for the Target, if no target is added a standard collider will be added, see ExampleOfAutoCollider in the sample scene. Options - AdaptiveGaze The AdaptiveGaze component has several options that can be modified to fit the agents purpose or personality: detectionRadius defines how big the detection cube in which items can be seen in front of the agent is. Use Window > Analysis > Physics Debug > Queries to see the detection radius, decrease detection Interval to see the cube on every frame. maxNumberOfTargetsInRange should be an upper limit of how many items can be in front of the agent, otherwise undefined behavior. detectionIntervalWhenWalking and detectionIntervalWhenIdle is the detection interval in which the detection cube is checked for items in seconds. Longer intervals allow the agent to look after items that move, even when they move outside the detection cube. chanceHighestRankedTarget , chanceSecondHighestTarget , chanceThirdHighestTarget define the chances for looking at the most interesting, second interesting and third interesting item based on the calculated interest value. chanceRandomTarget defines the chance for looking at a random item in sight. chanceIdleTarget defines the chance for the agent to not look at anything specific and to play the ideal animation instead. Options - AdaptiveGazeTarget Importance defines how important the object is to any agent from 1-10. If the Importance increases since the agent last looked at it, the novelty for that target will also be increased for that agent. CanCurrentlyBeLookedAt can be used to switch the objects perceivability off. This is used by the Item component when the item is picked up or dropped. Example Scenes The framework contains one example scene that demonstrates the adaptive gaze functionality. In that the agent walks past multiple objects with the AdaptiveGazeTarget component and looks at them dynamically. The AdaptiveGazeSampleController adds multiple waypoints where the agent should walk. Optionally, the sample controller also provides options to overwrite the adaptive gaze at the beginning for a specified AimAtTime ."
  },
  "manual/aiming.html": {
    "href": "manual/aiming.html",
    "title": "Aiming | Documentation of the Virtual Agents Framework",
    "keywords": "Aiming The framework provides the capabilities to have an agent point or aim at something in the scene. The provided aiming capabilities are used by the adaptive gaze and the inverse kinematics pointing/aiming animation, that can be used by specifying a target in the AgentAnimationTask or in the shortcut PlayAnimation(String, Single, String, Int32, String, GameObject) . All of these automatically add a AimAt to the agent. AimAt Script The AimAt script defines what the target is, what part(s) of the agent should point at the target, and what bones move to accomplish the pointing. There are several bone presets, for example Right Arm that can be selected by specifying a layer. As of now the aiming animation has predefined options for the following: Right Arm Left Arm Right Leg Left Leg Head Base Layer (orient chest, spine and hips towards the target) The AimAt script can be extended to allow for more or differently weighted bone presets. Example Scenes The framework contains one example scene that directly demonstrates the pointing functionality, as well as the adaptive gaze sample that uses the aiming capabilities indirectly. In the 'AimingSample' the agent aims at a moving target with its two hands and its head. The AimingSampleController has the option to add multiple waypoints where the agent should walk, while pointing at the targets. If selected in the inspector the controller adds pointing tasks for the head, the left arm and the right arm. It also allows to first play a wave animation on the right arm."
  },
  "manual/behavior-tree.html": {
    "href": "manual/behavior-tree.html",
    "title": "Behavior Tree | Documentation of the Virtual Agents Framework",
    "keywords": "Behavior Tree Note The current version contains an experimental behavior tree tool that can be used to schedule different task for the agent. The functionality and ease of use will be extended in an upcoming release of the Virtual Agents Framework. As of now, this feature should be seen as experimental and compatibility with feature releases is not guaranteed. See the BehaviorTree sample for a demonstration of the current state and its functionality."
  },
  "manual/items.html": {
    "href": "manual/items.html",
    "title": "Items | Documentation of the Virtual Agents Framework",
    "keywords": "Items Objects that an agent can interact with in any way, should get the Item component. Currently, this allows items to be picked up and dropped. Picking Up and Dropping Items Items can be picked up with a AgentPickUpTask or PickUp when they are close enough, the task will fail if the object is not near enough or if CanBePickedUp of the items return false. To bring an agent easily in the reach of an item the shortcut GoToAndPickUp can be used. With all methods a socket can be specified to which the item will be attached when after it is picked up. Currently, the following sockets are supported: MeshSockets.SocketId.RightHand MeshSockets.SocketId.LeftHand MeshSockets.SocketId.Spine When the LeftHand socket is selected a simple inverse kinematics (IK) animation on the left hand will be played, for the Spine and RightHand socket, the animation will be played on the right hand. The item can also specify a GrabTarget , this is where the IK animation will aim for and also what will we placed at the socket. The hand of the agent will also automatically be rotated towards the GrabTarget . Items can be dropped with a AgentDropTask or the shortcut DropItem . This will detach the item from the agent and invoke the dropEvent of the Item. As seen in the example this could be used to reactivate physics on the item. Requirements The agent needs the MeshSockets and RigBuilder components, as well as everything that is part of the AnimationRigging child object in the agent prefab, in which the Sockets for the item positions are defined as well as the inverse kinematics animation for the grab animation. For more information on the used Unity Package see animation rigging package . Items that should be picked up need the Item component. The Items CanBePickedUp method needs to return true. (optional) A GrabTarget can be defined, that's where the agent will move its hand position and rotation wise and what attaches to the specified socked when picking the object up. The default is the local zero coordinates of the item. Example Scenes The framework contains an example scene that demonstrates the ability to pick up and drop items. The samples contain a ItemController that controls the movement of the items in the scene, moving them in squares as long as there are not picked up. It also listens to the items dropEvent and activates the rigidbody physics of the sword item when the event is invoked. The ItemPickUpSampleController first adds a movement task and a pickup task for each item in the scene, as defined in the controller object. Two swords will be picked up by the right hand, the first one gets attached to the hand socket, while the second one gets attached to the spine socket. The third item is a ring that gets picked up and attached to the left hand. The last item is a pill formed item, that will be picked up and held in the left hand. After that the first item is dropped at a specified point. The second item is dropped by calling the method that drops all items at a specific point. Adaptive Gaze To make an agent appear more life-like it can automatically look at objects and items in front of him, swerve between the objects, idle in between and pick up on sudden interest changes, like objects that start to move. To make the agent look at objects that are about to be picked up the AdaptiveGazeTarget component can be added to the object. It will automatically be deactivated when the object is picked up. See adaptive gaze for more information."
  },
  "manual/own-agents.html": {
    "href": "manual/own-agents.html",
    "title": "Adding Own Agent Models and Animations | Documentation of the Virtual Agents Framework",
    "keywords": "Adding Own Agent Models and Animations The framework already provides a standard agent which can be added as a prefab. However, if you want to add your own character, for example from a 3D scan, this is also possible. Preparing the Character To create a new agent from scratch, first add a humanoid character to your project. The character needs to be rigged. So, it requires a skeleton that was set up in a 3D software like Blender. The rig is what drives the movements of the character and it defines which parts of the mesh are deformed during an animation. Import Into Unity In Unity's import settings, set the rig type to \"humanoid\" so that animations can be transferred to the new character. Check the configuration of the rig mapping to make sure that bones are correctly transferred to Unity's default humanoid rig. In this configuration, there are also more advanced settings for the muscles. Usually, you do not need to worry about them but if you want your agent to be more or less flexible than defined in the animations, you can accomplish this with the muscle settings. Setup in the Scene After finishing the setup, you can add the character to your scene. Next, add the Agent component to the character in the scene. This will automatically add the NavMeshAgent component and the AnimationSynchronizer component to the character. Because of its humanoid type, there should already be an Animator component on your agent. You need to assign an AnimationController to the Animator. It is recommended to choose the default \"StandardAnimationController\" which is provided by the framework. Optional: Adjust Animation Controller Usually, it suffices to take the existing standard controller as a basis. T extend the animation range of the agent, it is recommended to copy the existing controller and to extend it rather than starting with a blank controller. However, to create a controller from scratch, it needs to follow these guidelines: There needs to be a blend tree that mixes an idle and a walking animation so that the agent can walk. The blend tree is driven by an input parameter called \"Speed\". If you choose a different name, also adapt the parameter name on the AnimationSynchronizer component. Replacing Existing Animations with Own Ones If you just want to substitute the standard animations but keep the general structure of the controller, you can also copy the controller and substitute the animations with your own imported ones. If you choose a different walking animation for the blend tree, make sure to recalculate the threshold values according to the speed value of the animation. If the threshold value of the blend tree is incorrect, the agent's feet will slide along the ground during walking. Also, make sure to set up the NavMeshAgent component by determining the corresponding speed and rotation values. The speed of the NavMeshAgent component should correspond to the speed threshold value of the blend tree in the animator component. With a lower value, the agent will not be able to walk at the full speed as intended by the animation. A higher value will cause foot sliding as the animation is too slow to keep up with the movement speed."
  },
  "manual/parallel-tasks.html": {
    "href": "manual/parallel-tasks.html",
    "title": "Parallel Tasks | Documentation of the Virtual Agents Framework",
    "keywords": "Parallel Tasks Tasks cannot only be executed sequentially but also in parallel if they, e.g., affect different regions of the agent's body. This means that an agent can, e.g., walk while waving its hand at the same time. To realize this, the Virtual Agents Framework provides a parallel tasks structure where tasks can be scheduled independently but also be synchronized using dependencies between tasks. Parallel Structure The agent consists of a series of task managers which determine which task to execute next. By calling ScheduleTask without specifying a layer, the task, by default, affects the entire body. Apart from this, there is a separate task manager for each relevant body region of the agent. Currently, this includes the following body regions: Left Arm Right Arm Left Leg Right Leg Head When applying parallel tasks, the main use case is to layer animations. It is recommended to always assign an animation task to the base layer and then overwrite a specific body region with a custom animation. In the example of the walking agent which is waving its hand, the walking animation would be set up as a task on the base layer. The waving animation is scheduled as a task on one of the two arm regions. As a result, the agent displays the full walking movements and only its arm is concerned with the waving motion. Synchronizing Task Layers In some cases, tasks need to wait for each other to start synchronously. In more complex tasks, this can be achieved by implementing a start condition on the tasks using the CanStart property. This pre-condition can contain any Boolean expression. A task can, e.g., wait for another task but it can also wait for a specific condition in the agent's environment to become true. Apart from this general purpose start-condition, the AgentBaseTask also implements a dependency system where tasks can automatically wait for each other. If task a depends on the completion of task b and both inherit from AgentBaseTask , call a.WaitFor(b) . Internally, WaitFor creates a pre-condition for task a . The CanStart property of a will only become true , once b has finished its execution, indicated by its IsFinished property. If task a depends on multiple tasks b and c , they can quickly be defined in WaitFor by listing all depending tasks as a.WaitFor(b, c) . Example Scenes The framework contains two example scenes for parallel tasks: One of them demonstrates the independent execution of parallel tasks. Here, the agent is assigned a series of walking tasks on its base layer and a combination of waiting and waving tasks on its left arm layer, as well as a head-shaking animation for the head. The tasks are just executed but do not contain any synchronization. In contract to this, the synchronization sample contains the same task sequence but here, the second waving animation will wait for the head shaking animation to complete. Both samples contain a TasksSampleController which demonstrates how to schedule the tasks and how to set the dependencies."
  },
  "manual/task-system.html": {
    "href": "manual/task-system.html",
    "title": "Task System | Documentation of the Virtual Agents Framework",
    "keywords": "Task System A possible way to influence the agent's behavior is to assign tasks to the agent which the agent then works on. Tasks Tasks are the elements which tell the agent what to do. Structure All tasks need to implement the IAgentTask interface. It determines the necessary methods that a task must have like StartExecution(Agent) to start the task's execution or Tick(Agent) which is called every frame during the execution. Pre-Implemented Tasks The Virtual Agents Framework contains an ever-growing collection of pre-implemented tasks. These tasks are meant as a starting point for composing behaviors of agents. Currently, the following tasks exist and can already be used: AgentAnimationTask : Play animations on the agent AgentMovementTask : Let the agent walk to a given location or follow an object dynamically AgentWaitTask : Let the agent wait for a specific amount of time AgentPickUpTask : Let the agent pickup an object next to them AgentPickUpTask : Let the agent drop an object or all objects that the agent is holding ### Adding Own Tasks In addition to the pre-implemented tasks, developers can also add own tasks that implement the IAgentTask interface. It is recommended to inherit from the AgentBaseTask class when creating new tasks. This base class already contains a lot of common logic for tasks, like marking a task as finished and then automatically invoking the event that is defined in the interface. If you have created a generic and configurable task that might be interesting to other developers, feel welcome to post a pull request on GitHub that contributes the task to the framework as a pre-implemented task. Task Scheduling Tasks are scheduled on agents using a priority queue. Each agent has a task manager which will evaluate the queue and start the execution of the next task. Scheduling a Task Instance on an Agent To assign a task to an agent, first create an instance of your task by calling its constructor. MyTask myTask = new MyTask(); Configure the task as required, e.g., by passing arguments to the constructor or by setting properties. After that, call ScheduleTask(IAgentTask, Int32, String) to schedule the task on a specific agent. Optionally, you can set the priority of the task. By default, it is set to 0, so negative values will be executed after all other tasks and positive values take priority over default tasks. The higher the number the earlier the task will be executed. Moreover, you can provide a layer argument to specify which animation layer the task affects. The agent is set up with different layers so that multiple actions can happen in parallel. By default, the \"Base Layer\" is chosen, so it affects the entire body of the agent. For more information on parallel layers see the documentation on parallel tasks . Shortcuts In order to keep the code brief and understandable, it is not always necessary to create the task instance object yourself and to schedule it on the agent explicitly. For common actions, it is also possible to call one of the shortcut functions on the agent. Currently, the following shortcut functions exist: GoTo GoTo(Vector3, Int32) : Let the agent walk to the specified coordinates. GoTo(Transform, Vector3, Int32) : Let the agent walk to the specified transform of an object in the scene. You can add an optional offset so that the agent does not run into the object but stops next to it. GoTo(GameObject, Vector3, Int32, Boolean) : Let the agent walk to the specified object in the scene. You can add an optional offset so that the agent does not run into the object but stops next to it. The agent can also follow an object dynamically, so that the agent will follow the object until it is reached. Partial incomplete paths will be allowed, when that option is enabled. WaitForSeconds : The agent waits for the given amount of seconds. PlayAnimation : Play an animation for the given time. Specify a start and stop trigger which will cause the animation to start and stop in the animator. If you add you own animations, set them up in a way that there are transitions in and out of your animation with the start and stop triggers set as conditions for entering the transition. Specifying a GameObject as an aimTarget for the animation, will start inverse kinematics (IK) on the specified layer. This can be used with NoAnimation as a start trigger to start the IK with no animation or with animations that benefit from the IK, for example the provided pointingLeft and pointingRight animation. PickUp : Pick up an item that is currently in reach of the agent, see items for more information GoToAndPickUp : Schedules an GoTo Task that makes the agent walk to the item before trying to pick it up DropItem : Drop the specified item if it is currently hold be the agent, if no item is specified, all items are dropped. GoToAndDropItem : Schedules an GoTo Task that makes the agent walk to the specified coordinates or transform before dropping the specified item or all items, if no item is specified."
  }
}